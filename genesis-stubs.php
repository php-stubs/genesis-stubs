<?php
/**
 * Generated stub declarations for Genesis
 * @see https://www.studiopress.com/get-genesis/ to download the Genesis framework (require an email)
 * @see https://github.com/php-stubs/genesis-stubs
 */

/**
 * Genesis Framework.
 *
 * WARNING: This file is part of the core Genesis Framework. DO NOT edit this file under any circumstances.
 * Please do all modifications in the form of a child theme.
 *
 * @package Genesis\Schema
 * @author  StudioPress
 * @license GPL-2.0-or-later
 * @link    https://my.studiopress.com/themes/genesis/
 */
namespace StudioPress\Genesis\Functions\Rest {
    /**
     * Add `layouts` endpoint to the REST API.
     *
     * Example: `curl https://example.com/wp-json/genesis/v1/layouts/site`
     * Example: `curl https://example.com/wp-json/genesis/v1/layouts/singular,page,24`
     *
     * @since 3.3.0 Accept multiple comma-separated layout types.
     *              Types are checked from right to left, returning the first type
     *              with registered layouts and falling back to 'site' if no passed
     *              types have registered layouts.
     * @since 3.1.0
     */
    function layouts()
    {
    }
    /**
     * Add `singular-images` endpoint to the REST API.
     *
     * Returns an array of post types that have genesis-singular-images support
     * with singular images enabled in the Singular Content panel in the Customizer.
     *
     * Example: `curl https://example.com/wp-json/genesis/v1/singular-images`
     *
     * Example response:
     *
     * [
     *     'post', // Featured Images are enabled on posts.
     *     'page'  // Featured Images are enabled on pages.
     * ]
     *
     * @since 3.1.0
     */
    function get_singular_images()
    {
    }
    /**
     * Update singular image state to turn featured image output on or off for
     * the provided post types.
     *
     * Expects to receive a JSON object with post type as key, then 1 for the value
     * to enable images, and 0 to disable.
     *
     * {
     *    "pages": 0, // Disable featured images on pages.
     *    "posts": 1  // Enable featured images on posts.
     * }
     *
     * Returns an array of all post types that now have featured images enabled
     * after the update is applied. For the above example, assuming no other post
     * types have `genesis-singular-images` support:
     *
     * [ "posts" ]
     *
     * @since 3.1.0
     */
    function set_singular_images()
    {
    }
    /**
     * Add `breadcrumbs` endpoint to the REST API.
     *
     * Returns an array of options that have breadcrumbs enabled.
     *
     * Example: `curl https://example.com/wp-json/genesis/v1/breadcrumbs`
     *
     * Example response: [ "breadcrumb_single", "breadcrumb_page" ]
     *
     * @since 3.1.0
     */
    function get_breadcrumbs()
    {
    }
    /**
     * Update breadcrumbs state to turn breadcrumb output on or off for
     * the provided option type.
     *
     * Expects to receive a JSON object with breadcrumb type as key,
     * then 1 for the value to enable breadcrumbs, and 0 to disable.
     *
     * {
     *    "breadcrumb_front_page": 0, // Disable breadcrumbs on the front page.
     *    "breadcrumb_single": 1      // Enable breadcrumbs on posts.
     *    "breadcrumb_page": 1        // Enable breadcrumbs on pages.
     * }
     *
     * Returns an array of all options that now have breadcrumbs enabled after
     * the update is applied. For the above example, assuming no other breadcrumbs
     * are enabled:
     *
     * [ "breadcrumb_single", "breadcrumb_page" ]
     *
     * @since 3.1.0
     */
    function set_breadcrumbs()
    {
    }
    /**
     * Presents show_on_front, page_on_front, and page_for_posts settings.
     *
     * These settings are not currently offered by the WordPress REST API. We could
     * switch to `wp` endpoints once the settings are exposed there.
     *
     * Example: `curl https://example.com/wp-json/genesis/v1/reading-settings`
     *
     * Example response:
     *
     * {"show_on_front":"page","page_on_front":123,"page_for_posts":456}
     *
     * @since 3.1.0
     */
    function get_reading_settings()
    {
    }
}
/**
 * Genesis Framework.
 *
 * WARNING: This file is part of the core Genesis Framework. DO NOT edit this file under any circumstances.
 * Please do all modifications in the form of a child theme.
 *
 * @package Genesis\Schema
 * @author  StudioPress
 * @license GPL-2.0-or-later
 * @link    https://my.studiopress.com/themes/genesis/
 */
namespace StudioPress\Genesis\Functions\Schema {
    /**
     * Add schema markup attributes for head element.
     *
     * @since 3.1.0
     *
     * @param array $attributes Existing attributes for `head` element.
     * @return array Amended attributes for `head` element.
     */
    function head($attributes)
    {
    }
    /**
     * Add schema markup attributes for body element.
     *
     * @since 3.1.0
     *
     * @param array $attributes Existing attributes for `body` element.
     * @return array Amended attributes for `body` element.
     */
    function body($attributes)
    {
    }
    /**
     * Add schema markup attributes for site header element.
     *
     * @since 3.1.0
     *
     * @param array $attributes Existing attributes for site header element.
     * @return array Amended attributes for site header element.
     */
    function site_header($attributes)
    {
    }
    /**
     * Add schema markup attributes for site title element.
     *
     * @since 3.1.0
     *
     * @param array $attributes Existing attributes for site title element.
     * @return array Amended attributes for site title element.
     */
    function site_title($attributes)
    {
    }
    /**
     * Add schema markup attributes for site description element.
     *
     * @since 3.1.0
     *
     * @param array $attributes Existing attributes for site description element.
     * @return array Amended attributes for site description element.
     */
    function site_description($attributes)
    {
    }
    /**
     * Add schema markup attributes for breadcrumbs wrapper.
     *
     * @since 3.1.0
     *
     * @param array $attributes Existing attributes for breadcrumbs wrapper element.
     * @return array Amended attributes for breadcrumbs wrapper element.
     */
    function breadcrumb($attributes)
    {
    }
    /**
     * Add schema markup attributes for breadcrumb item element.
     *
     * @since 3.1.0
     *
     * @param array $attributes Existing attributes for breadcrumb item element.
     * @return array Amended attributes for breadcrumb item element.
     */
    function breadcrumb_link_wrap($attributes)
    {
    }
    /**
     * Add schema markup attributes for breadcrumb link wrap meta element.
     *
     * @since 3.1.0
     *
     * @param array $attributes Existing attributes for breadcrumb link wrap meta element.
     * @return array Amended attributes for breadcrumb link wrap meta element.
     */
    function breadcrumb_link_wrap_meta($attributes)
    {
    }
    /**
     * Add schema markup attributes for breadcrumb link element.
     *
     * @since 3.1.0
     *
     * @param array  $attributes Existing attributes for breadcrumb link element.
     * @param string $context    Not used. Markup context (ie. `footer-widget-area`).
     * @param array  $args       Markup arguments.
     * @return array Amended attributes for breadcrumb link element.
     */
    function breadcrumb_link($attributes, $context, $args)
    {
    }
    /**
     * Add schema markup attributes for breadcrumb link text wrap.
     *
     * @since 3.1.0
     *
     * @param array $attributes Existing attributes for breadcrumb link text wrap.
     * @return array Amended attributes for breadcrumb link text wrap.
     */
    function breadcrumb_link_text_wrap($attributes)
    {
    }
    /**
     * Add schema markup attributes for search form.
     *
     * @since 3.1.0
     *
     * @param array $attributes Existing attributes for search form element.
     * @return array Amended attributes for search form element.
     */
    function search_form($attributes)
    {
    }
    /**
     * Add schema markup attributes for search form meta tag.
     *
     * @since 3.1.0
     *
     * @param array $attributes Existing attributes for search form meta element.
     * @return array Amended attributes for search form meta element.
     */
    function search_form_meta($attributes)
    {
    }
    /**
     * Add schema markup attributes for search form input element.
     *
     * @since 3.1.0
     *
     * @param array  $attributes Existing attributes for footer widget area wrapper elements.
     * @param string $context    Not used. Markup context (ie. `footer-widget-area`).
     * @param array  $args       Markup arguments.
     * @return array Amended attributes.
     */
    function search_form_input($attributes, $context, $args)
    {
    }
    /**
     * Add schema markup attributes for primary navigation element.
     *
     * @since 3.1.0
     *
     * @param array $attributes Existing attributes for primary navigation element.
     * @return array Amended attributes for navigation elements.
     */
    function nav_primary($attributes)
    {
    }
    /**
     * Add schema markup attributes for secondary navigation element.
     *
     * @since 3.1.0
     *
     * @param array $attributes Existing attributes for secondary navigation element.
     * @return array Amended attributes for navigation elements.
     */
    function nav_secondary($attributes)
    {
    }
    /**
     * Add schema markup attributes for header navigation element.
     *
     * @since 3.1.0
     *
     * @param array $attributes Existing attributes for header navigation element.
     * @return array Amended attributes for navigation elements.
     */
    function nav_header($attributes)
    {
    }
    /**
     * Add schema markup attributes for the span wrap around navigation item links.
     *
     * @since 3.1.0
     *
     * @param array $attributes Existing attributes for span wrap around navigation item links.
     * @return array Amended attributes for span wrap around navigation item links.
     */
    function nav_link_wrap($attributes)
    {
    }
    /**
     * Add schema markup attributes for the navigation item links.
     *
     * @since 3.1.0
     *
     * @param array $attributes Existing attributes for navigation item links.
     * @return array Amended attributes for navigation item links.
     */
    function nav_link($attributes)
    {
    }
    /**
     * Add schema markup attributes for entry element.
     *
     * @since 3.1.0
     *
     * @param array $attributes Existing attributes for entry element.
     * @return array Amended attributes for entry element.
     */
    function entry($attributes)
    {
    }
    /**
     * Add schema markup attributes for entry image element.
     *
     * @since 3.1.0
     *
     * @param array $attributes Existing attributes for entry image element.
     * @return array Amended attributes for entry image element.
     */
    function entry_image($attributes)
    {
    }
    /**
     * Add attributes for singular entry image element.
     *
     * @since 3.1.0
     *
     * @param array $attributes Existing attributes for entry image element.
     * @return array Amended attributes for entry image element.
     */
    function singular_entry_image($attributes)
    {
    }
    /**
     * Add schema markup attributes for entry image element shown in a widget.
     *
     * @since 3.1.0
     *
     * @param array $attributes Existing attributes for entry image element shown in a widget.
     * @return array Amended attributes for entry image element shown in a widget.
     */
    function entry_image_widget($attributes)
    {
    }
    /**
     * Add schema markup attributes for entry image element shown in a grid loop.
     *
     * @since 3.1.0
     *
     * @param array $attributes Existing attributes for entry image element shown in a grid loop.
     * @return array Amended attributes for entry image element shown in a grid loop.
     */
    function entry_image_grid_loop($attributes)
    {
    }
    /**
     * Add schema markup attributes for author element for an entry.
     *
     * @since 3.1.0
     *
     * @param array $attributes Existing attributes for author element for an entry.
     * @return array Amended attributes for author element for an entry.
     */
    function entry_author($attributes)
    {
    }
    /**
     * Add schema markup attributes for entry author link element.
     *
     * @since 3.1.0
     *
     * @param array $attributes Existing attributes for entry author link element.
     * @return array Amended attributes for entry author link element.
     */
    function entry_author_link($attributes)
    {
    }
    /**
     * Add schema markup attributes for entry author name element.
     *
     * @since 3.1.0
     *
     * @param array $attributes Existing attributes for entry author name element.
     * @return array Amended attributes for entry author name element.
     */
    function entry_author_name($attributes)
    {
    }
    /**
     * Add schema markup attributes for time element for an entry.
     *
     * @since 3.1.0
     *
     * @param array $attributes Existing attributes for time element for an entry.
     * @return array Amended attributes for time element for an entry.
     */
    function entry_time($attributes)
    {
    }
    /**
     * Add schema markup attributes for modified time element for an entry.
     *
     * @since 3.1.0
     *
     * @param array $attributes Existing attributes for modified time element for an entry.
     * @return array Amended attributes for modified time element for an entry.
     */
    function entry_modified_time($attributes)
    {
    }
    /**
     * Add schema markup attributes for entry title element.
     *
     * @since 3.1.0
     *
     * @param array $attributes Existing attributes for entry title element.
     * @return array Amended attributes for entry title element.
     */
    function entry_title($attributes)
    {
    }
    /**
     * Add schema markup attributes for entry content element.
     *
     * @since 3.1.0
     *
     * @param array $attributes Existing attributes for entry content element.
     * @return array Amended attributes for entry content element.
     */
    function entry_content($attributes)
    {
    }
    /**
     * Add schema markup attributes for single comment element.
     *
     * @since 3.1.0
     *
     * @param array $attributes Existing attributes for single comment element.
     * @return array Amended attributes for single comment element.
     */
    function comment($attributes)
    {
    }
    /**
     * Add schema markup attributes for comment author element.
     *
     * @since 3.1.0
     *
     * @param array $attributes Existing attributes for comment author element.
     * @return array Amended attributes for comment author element.
     */
    function comment_author($attributes)
    {
    }
    /**
     * Add schema markup attributes for comment author link element.
     *
     * @since 3.1.0
     *
     * @param array $attributes Existing attributes for comment author link element.
     * @return array Amended attributes for comment author link element.
     */
    function comment_author_link($attributes)
    {
    }
    /**
     * Add schema markup attributes for comment author name element.
     *
     * @since 3.1.0
     *
     * @param array $attributes Existing attributes for comment author name element.
     * @return array Amended attributes for comment author name element.
     */
    function comment_author_name($attributes)
    {
    }
    /**
     * Add schema markup attributes for comment time element.
     *
     * @since 3.1.0
     *
     * @param array $attributes Existing attributes for comment time element.
     * @return array Amended attributes for comment time element.
     */
    function comment_time($attributes)
    {
    }
    /**
     * Add schema markup attributes for comment time link element.
     *
     * @since 3.1.0
     *
     * @param array $attributes Existing attributes for comment time link element.
     * @param array $context Not used. Markup context (ie. `footer-widget-area`).
     * @param array $args Arguments.
     * @return array Amended attributes for comment time link.
     */
    function comment_time_link($attributes, $context, $args)
    {
    }
    /**
     * Add schema markup attributes for comment content container.
     *
     * @since 3.1.0
     *
     * @param array $attributes Existing attributes for comment content container.
     * @return array Amended attributes for comment content container.
     */
    function comment_content($attributes)
    {
    }
    /**
     * Add schema markup attributes for author box element.
     *
     * @since 3.1.0
     *
     * @param array $attributes Existing attributes for author box element.
     * @return array Amended attributes for author box element.
     */
    function author_box($attributes)
    {
    }
    /**
     * Add schema markup attributes for primary sidebar element.
     *
     * @since 3.1.0
     *
     * @param array $attributes Existing attributes for primary sidebar element.
     * @return array Amended attributes for primary sidebar element.
     */
    function sidebar_primary($attributes)
    {
    }
    /**
     * Add schema markup attributes for secondary sidebar element.
     *
     * @since 3.1.0
     *
     * @param array $attributes Existing attributes for secondary sidebar element.
     * @return array Amended attributes for secondary sidebar element.
     */
    function sidebar_secondary($attributes)
    {
    }
    /**
     * Add schema markup attributes for site footer element.
     *
     * @since 3.1.0
     *
     * @param array $attributes Existing attributes for site footer element.
     * @return array Amended attributes for site footer element.
     */
    function site_footer($attributes)
    {
    }
}
namespace {
    /**
     * Genesis Framework.
     *
     * WARNING: This file is part of the core Genesis Framework. DO NOT edit this file under any circumstances.
     * Please do all modifications in the form of a child theme.
     *
     * @package Genesis\Framework
     * @author  StudioPress
     * @license GPL-2.0-or-later
     * @link    https://my.studiopress.com/themes/genesis/
     */
    /**
     * Used to initialize the framework in the various template files.
     *
     * It pulls in all the necessary components like header and footer, the basic
     * markup structure, and hooks.
     *
     * @since 1.3.0
     */
    function genesis()
    {
    }
    /**
     * Genesis Framework.
     *
     * WARNING: This file is part of the core Genesis Framework. DO NOT edit this file under any circumstances.
     * Please do all modifications in the form of a child theme.
     *
     * @package Genesis\Breadcrumbs
     * @author  StudioPress
     * @license GPL-2.0-or-later
     * @link    https://my.studiopress.com/themes/genesis/
     */
    /**
     * Helper function for the Genesis Breadcrumb Class.
     *
     * @since 1.0.0
     *
     * @global Genesis_Breadcrumb $_genesis_breadcrumb
     *
     * @param array $args Breadcrumb arguments.
     */
    function genesis_breadcrumb($args = [])
    {
    }
    /**
     * Are breadcrumbs hidden for the current page?
     *
     * Indicates that the “Hide breadcrumbs” checkbox is enabled and checked.
     *
     * @since 3.1.0
     *
     * @return bool True if breadcrumbs are hidden, false otherwise.
     */
    function genesis_breadcrumbs_hidden_on_current_page()
    {
    }
    /**
     * Are breadcrumbs disabled for the current page type?
     *
     * @since 3.1.1
     *
     * @return bool True if breadcrumbs are disabled, false otherwise.
     */
    function genesis_breadcrumbs_disabled_on_current_page()
    {
    }
    /**
     * Display Breadcrumbs above the Loop. Concedes priority to popular breadcrumb
     * plugins.
     *
     * @since 1.0.0
     *
     * @return void Return early if Genesis settings dictate that no breadcrumbs should show in current context.
     */
    function genesis_do_breadcrumbs()
    {
    }
    /**
     * Gets breadcrumb options that are enabled in Genesis settings.
     *
     * @since 3.1.0
     *
     * @return array The breadcrumb options that are enabled.
     */
    function genesis_breadcrumb_options_enabled()
    {
    }
    /**
     * Filter the feed URI if the user has input a custom feed URI.
     *
     * Applied in the `get_feed_link()` WordPress function.
     *
     * @since 1.3.0
     *
     * @param string $output From the get_feed_link() WordPress function.
     * @param string $feed   Optional. Defaults to default feed. Feed type (rss2, rss, sdf, atom).
     * @return string Amended feed URL.
     */
    function genesis_feed_links_filter($output, $feed)
    {
    }
    /**
     * Redirect the browser to the custom feed URI.
     *
     * Exits PHP after redirect.
     *
     * @since 1.3.0
     *
     * @return void Return early if is feed user agent is set and matches Feedblitz,
     *              Feedburner or Feedvalidator. Redirects and exits on success.
     */
    function genesis_feed_redirect()
    {
    }
    /**
     * Genesis Framework.
     *
     * WARNING: This file is part of the core Genesis Framework. DO NOT edit this file under any circumstances.
     * Please do all modifications in the form of a child theme.
     *
     * @package Genesis\Formatting
     * @author  StudioPress
     * @license GPL-2.0-or-later
     * @link    https://my.studiopress.com/themes/genesis/
     */
    /**
     * Return a phrase shortened in length to a maximum number of characters.
     *
     * Result will be truncated at the last white space in the original string. In this function the word separator is a
     * single space. Other white space characters (like newlines and tabs) are ignored.
     *
     * If the first `$max_characters` of the string does not contain a space character, an empty string will be returned.
     *
     * @since 1.4.0
     *
     * @param string $text           A string to be shortened.
     * @param int    $max_characters The maximum number of characters to return.
     * @return string Truncated string. Empty string if `$max_characters` is falsy.
     */
    function genesis_truncate_phrase($text, $max_characters)
    {
    }
    // phpcs:disable WordPress.NamingConventions.PrefixAllGlobals.NonPrefixedFunctionFound, WordPress.NamingConventions.PrefixAllGlobals.NonPrefixedHooknameFound -- Some of the earliest Genesis functions. Can't be renamed.
    /**
     * Return content stripped down and limited content.
     *
     * Strips out tags and shortcodes, limits the output to `$max_char` characters, and appends an ellipsis and more link to the end.
     *
     * @since 1.0.0
     *
     * @param int    $max_characters The maximum number of characters to return.
     * @param string $more_link_text Optional. Text of the more link. Default is "(more...)".
     * @param bool   $stripteaser    Optional. Strip teaser content before the more text. Default is false.
     * @return string Limited content.
     */
    function get_the_content_limit($max_characters, $more_link_text = '(more...)', $stripteaser = \false)
    {
    }
    /**
     * Return more link text plus hidden title for screen readers, to improve accessibility.
     *
     * @since 2.2.0
     *
     * @param string $more_link_text Text of the more link.
     * @return string `$more_link_text` with or without the hidden title.
     */
    function genesis_a11y_more_link($more_link_text)
    {
    }
    /**
     * Echo the limited content.
     *
     * @since 1.0.0
     *
     * @param int    $max_characters The maximum number of characters to return.
     * @param string $more_link_text Optional. Text of the more link. Default is "(more...)".
     * @param bool   $stripteaser    Optional. Strip teaser content before the more text. Default is false.
     */
    function the_content_limit($max_characters, $more_link_text = '(more...)', $stripteaser = \false)
    {
    }
    // phpcs:enable WordPress.NamingConventions.PrefixAllGlobals.NonPrefixedFunctionFound, WordPress.NamingConventions.PrefixAllGlobals.NonPrefixedHooknameFound
    /**
     * Add `rel="nofollow"` attribute and value to links within string passed in.
     *
     * @since 1.0.0
     *
     * @param string $text HTML markup.
     * @return string Amended HTML markup with `rel="nofollow"` attribute.
     */
    function genesis_rel_nofollow($text)
    {
    }
    /**
     * Remove attributes from a HTML element.
     *
     * This function accepts a string of HTML, parses it for any elements in the `$elements` array, then parses each element
     * for any attributes in the `$attributes` array, and strips the attribute and its value(s).
     *
     * ~~~
     * // Strip class attribute from an anchor
     * genesis_strip_attr(
     *     '<a class="my-class" href="http://google.com/">Google</a>',
     *     'a',
     *     'class'
     * );
     * // Strips class and id attributes from div and span elements
     * genesis_strip_attr(
     *     '<div class="my-class" id="the-div"><span class="my-class" id="the-span"></span></div>',
     *     array( 'div', 'span' ),
     *     array( 'class', 'id' )
     * );
     * ~~~
     *
     * @since 1.0.0
     *
     * @link http://studiopress.com/support/showthread.php?t=20633
     *
     * @param string       $text       A string of HTML formatted code.
     * @param array|string $elements   Elements that $attributes should be stripped from.
     * @param array|string $attributes Attributes that should be stripped from $elements.
     * @param bool         $two_passes Whether the function should allow two passes.
     * @return string HTML markup with attributes stripped.
     */
    function genesis_strip_attr($text, $elements, $attributes, $two_passes = \true)
    {
    }
    /**
     * Return the special URL of a paged post.
     *
     * Taken from _wp_link_page() in WordPress core, but instead of anchor markup, just return the URL.
     *
     * @since 2.2.0
     *
     * @param int $i       The page number to generate the URL from.
     * @param int $post_id The post ID.
     * @return string Unescaped URL for the a paged post.
     */
    function genesis_paged_post_url($i, $post_id = 0)
    {
    }
    /**
     * Sanitize multiple HTML classes in one pass.
     *
     * Accepts either an array of `$classes`, or a space separated string of classes and sanitizes them using the
     * `sanitize_html_class()` WordPress function.
     *
     * @since 2.0.0
     *
     * @param array|string $classes       Classes to be sanitized.
     * @param string       $return_format Optional. The return format, 'input', 'string', or 'array'. Default is 'input'.
     * @return array|string String of multiple sanitized classes.
     */
    function genesis_sanitize_html_classes($classes, $return_format = 'input')
    {
    }
    /**
     * Return an array of allowed tags for output formatting.
     *
     * Mainly used by `wp_kses()` for sanitizing output.
     *
     * @since 1.6.0
     *
     * @return array Allowed elements and attributes, used with KSES.
     */
    function genesis_formatting_allowedtags()
    {
    }
    /**
     * Wrapper for `wp_kses()` that can be used as a filter function.
     *
     * @since 1.8.0
     *
     * @param string $string Content to filter through KSES.
     * @return string Filtered content with only allowed HTML elements.
     */
    function genesis_formatting_kses($string)
    {
    }
    /**
     * Calculate the time difference - a replacement for `human_time_diff()` until it is improved.
     *
     * Based on BuddyPress function `bp_core_time_since()`, which in turn is based on functions created by
     * Dunstan Orchard - http://1976design.com
     *
     * This function will return an text representation of the time elapsed since a
     * given date, giving the two largest units e.g.:
     *
     *  - 2 hours and 50 minutes
     *  - 4 days
     *  - 4 weeks and 6 days
     *
     * @since 1.7.0
     *
     * @param int      $older_date     Unix timestamp of date you want to calculate the time since for`.
     * @param int|bool $newer_date     Optional. Unix timestamp of date to compare older date to. Default false (current time).
     * @param int      $relative_depth Optional, how many units to include in relative date. Default 2.
     * @return string The time difference between two dates.
     */
    function genesis_human_time_diff($older_date, $newer_date = \false, $relative_depth = 2)
    {
    }
    /**
     * Mark up content with code tags.
     *
     * Escapes all HTML, so `<` gets changed to `&lt;` and displays correctly.
     *
     * Used almost exclusively within labels and text in user interfaces added by Genesis.
     *
     * @since 2.0.0
     *
     * @param string $content Content to be wrapped in code tags.
     * @return string Content wrapped in `code` tags.
     */
    function genesis_code($content)
    {
    }
    /**
     * Remove paragraph tags from content.
     *
     * @since 2.5.0
     *
     * @param string $content Content possibly containing paragraph tags.
     * @return string Content without paragraph tags.
     */
    function genesis_strip_p_tags($content)
    {
    }
    /**
     * Genesis Framework.
     *
     * WARNING: This file is part of the core Genesis Framework. DO NOT edit this file under any circumstances.
     * Please do all modifications in the form of a child theme.
     *
     * @package StudioPress\Genesis
     * @author  StudioPress
     * @license GPL-2.0-or-later
     * @link    https://my.studiopress.com/themes/genesis/
     */
    /**
     * Enable the author box for ALL users.
     *
     * @since 1.4.1
     *
     * @param array $args Optional. Arguments for enabling author box. Default is empty array.
     */
    function genesis_enable_author_box($args = [])
    {
    }
    /**
     * Redirect the user to an admin page, and add query args to the URL string for alerts, etc.
     *
     * @since 1.6.0
     *
     * @param string $page       Menu slug.
     * @param array  $query_args Optional. Associative array of query string arguments (key => value). Default is an empty array.
     * @return void Return early if first argument, `$page`, is falsy.
     */
    function genesis_admin_redirect($page, array $query_args = [])
    {
    }
    /**
     * Redirect singular page to an alternate URL.
     *
     * @since 2.0.0
     *
     * @return void Return early if not a singular entry.
     */
    function genesis_custom_field_redirect()
    {
    }
    /**
     * Return a specific value from the array passed as the second argument to `add_theme_support()`.
     *
     * Supports associative and index array of theme support arguments.
     *
     * @since 1.9.0
     *
     * @param string $feature The theme feature.
     * @param string $arg     The theme feature argument.
     * @param string $default Optional. Fallback if value is blank or doesn't exist.
     *                        Default is empty string.
     * @return mixed Return value if associative array, true if indexed array, or
     *               `$default` if theme does not support `$feature` or `$arg` does not exist.
     */
    function genesis_get_theme_support_arg($feature, $arg, $default = '')
    {
    }
    /**
     * Check if the environment is in development mode via SCRIPT_DEBUG constant.
     *
     * @since 3.0.0
     *
     * @return bool True when debugging scripts, otherwise false.
     */
    function genesis_is_in_dev_mode()
    {
    }
    /**
     * Gets the theme handle from the CHILD_THEME_VERSION constant (if defined), or 'Theme Name' header in style.css.
     *
     * Uses 'Name' instead of 'Text Domain' because the Theme Name header is more
     * commonly set and maintained.
     *
     * @since 3.0.0
     *
     * @return string The theme's handle.
     */
    function genesis_get_theme_handle()
    {
    }
    /**
     * Gets the active theme version from CHILD_THEME_VERSION constant (if defined), style.css in production, or a timestamp if SCRIPT_DEBUG is true.
     *
     * @since 3.0.0
     *
     * @return string Theme version or current Unix timestamp for use as a cache-busting string.
     */
    function genesis_get_theme_version()
    {
    }
    /**
     * Locate and require a config file.
     *
     * First, search child theme for the config. If config file doesn't exist in the child,
     * search the parent for the config file.
     *
     * @since 2.8.0
     *
     * @param string $config The config file to look for (not including .php file extension).
     * @return array The config data.
     */
    function genesis_get_config($config)
    {
    }
    /**
     * Detect active plugin by constant, class or function existence.
     *
     * @since 1.6.0
     *
     * @param array $plugins Array of array for constants, classes and / or functions to check for plugin existence.
     * @return bool True if plugin exists or false if plugin constant, class or function not detected.
     */
    function genesis_detect_plugin(array $plugins)
    {
    }
    /**
     * Check that we're targeting a specific Genesis admin page.
     *
     * The `$pagehook` argument is expected to be one of 'genesis', 'seo-settings' or 'genesis-import-export' although
     * others can be accepted.
     *
     * @since 1.8.0
     *
     * @global string $page_hook Page hook for current page.
     *
     * @param string $pagehook Page hook string to check.
     * @return bool Return `true` if the global `$page_hook` matches given `$pagehook`, `false` otherwise.
     */
    function genesis_is_menu_page($pagehook = '')
    {
    }
    /**
     * Check whether we are currently viewing the site via the WordPress Customizer.
     *
     * @since 2.0.0
     *
     * @global WP_Customize_Manager $wp_customize Customizer instance.
     *
     * @return bool Return true if viewing page via Customizer, false otherwise.
     */
    function genesis_is_customizer()
    {
    }
    /**
     * Determine if the Blog template is being used.
     *
     * `is_page_template()` is not available within the loop or any loop that
     * modifies $wp_query because it changes all the conditionals therein.
     * Since the conditionals change, is_page() no longer returns true, thus
     * is_page_template() will always return false.
     *
     * @since 2.1.0
     *
     * @link http://codex.wordpress.org/Function_Reference/is_page_template#Cannot_Be_Used_Inside_The_Loop
     *
     * @return bool True if Blog template is being used, false otherwise.
     */
    function genesis_is_blog_template()
    {
    }
    /**
     * Get the `post_type` from the global `$post` if supplied value is empty.
     *
     * @since 2.0.0
     *
     * @global WP_Query $wp_the_query Query object.
     *
     * @param string $post_type_name Post type name.
     * @return string Post type name of global `$post`.
     */
    function genesis_get_global_post_type_name($post_type_name = '')
    {
    }
    /**
     * Get list of custom post type objects which need an archive settings page.
     *
     * Archive settings pages are added for CPTs that:
     *
     * - are public,
     * - are set to show the UI,
     * - are set to show in the admin menu,
     * - have an archive enabled,
     * - not one of the built-in types,
     * - support "genesis-cpt-archives-settings".
     *
     * This last item means that if you're using an archive template and don't want Genesis interfering with it with these
     * archive settings, then don't add the support. This support check is handled in
     * {@link genesis_has_post_type_archive_support()}.
     *
     * Applies the `genesis_cpt_archives_args` filter, to change the conditions for which post types are deemed valid.
     *
     * The results are held in a static variable, since they won't change over the course of a request.
     *
     * @since 2.0.0
     *
     * @return array A list of post type names or objects.
     */
    function genesis_get_cpt_archive_types()
    {
    }
    /**
     * Get list of custom post type names which need an archive settings page.
     *
     * @since 2.0.0
     *
     * @return array Custom post type names.
     */
    function genesis_get_cpt_archive_types_names()
    {
    }
    /**
     * Check if a post type supports an archive setting page.
     *
     * @since 2.0.0
     *
     * @param string $post_type_name Post type name.
     * @return bool `true` if custom post type name has `genesis-cpt-archives-settings` support, `false` otherwise.
     */
    function genesis_has_post_type_archive_support($post_type_name = '')
    {
    }
    /**
     * Determine if HTML5 is activated by the child theme.
     *
     * @since 2.0.0
     *
     * @return bool `true` if current theme supports `html5`, `false` otherwise.
     */
    function genesis_html5()
    {
    }
    /**
     * Determine if theme support genesis-accessibility is activated by the child theme.
     * Assumes the presence of a screen-reader-text class in the stylesheet (required generated class as from WordPress 4.2)
     *
     * Adds screen-reader-text by default.
     * Skip links to primary navigation, main content, sidebars and footer, semantic headings and a keyboard accessible dropdown menu
     * can be added as extra features as: 'skip-links', 'headings', 'drop-down-menu'
     *
     * @since 2.2.0
     *
     * @param string $arg Optional. Specific accessibility feature to check for support. Default is screen-reader-text.
     * @return bool `true` if current theme supports `genesis-accessibility`, or a specific feature of it, `false` otherwise.
     */
    function genesis_a11y($arg = 'screen-reader-text')
    {
    }
    /**
     * Display a HTML sitemap.
     *
     * Used in `page_archive.php` and `404.php`.
     *
     * @see genesis_get_sitemap()
     *
     * @since 2.2.0
     *
     * @param string $heading Optional. Heading element. Default is `h2`.
     */
    function genesis_sitemap($heading = 'h2')
    {
    }
    /**
     * Get markup for a HTML sitemap.
     *
     * Can be filtered with `genesis_sitemap_output`.
     *
     * If the number of published posts is 0, then Categories, Authors,
     * Monthly and Recent Posts headings will not be shown.
     *
     * $heading:  genesis_a11y( 'headings' ) ? 'h2' : 'h4' );
     *
     * @since 2.4.0
     *
     * @param string $heading Optional. Heading element. Default is `h2`.
     * @return string $heading Sitemap content.
     */
    function genesis_get_sitemap($heading = 'h2')
    {
    }
    /**
     * Build links to install plugins.
     *
     * @since 2.0.0
     *
     * @param string $plugin_slug Plugin slug.
     * @param string $text        Plugin name.
     * @return string HTML markup for links.
     */
    function genesis_plugin_install_link($plugin_slug = '', $text = '')
    {
    }
    /**
     * Check if the root page of the site is being viewed.
     *
     * `is_front_page()` returns false for the root page of a website when
     * - the WordPress "Front page displays" setting is set to "A static page"
     * - "Front page" is left undefined
     * - "Posts page" is assigned to an existing page
     *
     * This function checks for is_front_page() or the root page of the website
     * in this edge case.
     *
     * @since 2.2.0
     *
     * @return bool `true` if this is the root page of the site, `false` otherwise.
     */
    function genesis_is_root_page()
    {
    }
    /**
     * Calculate and return the canonical URL.
     *
     * @since 2.2.0
     *
     * @return null|string The canonical URL if one exists, `null` otherwise.
     */
    function genesis_canonical_url()
    {
    }
    /**
     * Checks if this web page is an AMP URL.
     *
     * @since 2.7.0
     *
     * @return bool `true` if AMP URL; else `false`.
     */
    function genesis_is_amp()
    {
    }
    /**
     * Genesis Framework.
     *
     * WARNING: This file is part of the core Genesis Framework. DO NOT edit this file under any circumstances.
     * Please do all modifications in the form of a child theme.
     *
     * @package Genesis\Header
     * @author  StudioPress
     * @license GPL-2.0-or-later
     * @link    https://my.studiopress.com/themes/genesis/
     */
    /**
     * Determine the meta description based on contextual criteria.
     *
     * @since 2.4.0
     *
     * @return string Meta description.
     */
    function genesis_get_seo_meta_description()
    {
    }
    /**
     * Determine the meta keywords based on contextual criteria.
     *
     * @since 2.4.0
     *
     * @return string Content for keywords meta tag.
     */
    function genesis_get_seo_meta_keywords()
    {
    }
    /**
     * Determine the `noindex`, `nofollow`, `noarchive` robots meta code for the current context.
     *
     * @since 2.4.0
     *
     * @global WP_Query $wp_query Query object.
     *
     * @return string String for `content` attribute of `robots` meta tag.
     */
    function genesis_get_robots_meta_content()
    {
    }
    /**
     * Return favicon URL.
     *
     * Falls back to Genesis theme favicon.
     *
     * URL to favicon is filtered via `genesis_favicon_url` before being echoed.
     *
     * @since 2.4.0
     *
     * @return string Path to favicon.
     */
    function genesis_get_favicon_url()
    {
    }
    /**
     * Genesis Framework.
     *
     * WARNING: This file is part of the core Genesis Framework. DO NOT edit this file under any circumstances.
     * Please do all modifications in the form of a child theme.
     *
     * @package Genesis\Images
     * @author  StudioPress
     * @license GPL-2.0-or-later
     * @link    https://my.studiopress.com/themes/genesis/
     */
    /**
     * Pull an attachment ID from a post, if one exists.
     *
     * @since 1.0.0
     *
     * @param int $index   Optional. Index of which image to return from a post. Default is 0.
     * @param int $post_id Optional. Post ID. Default is `get_the_ID()`.
     * @return int|bool Image ID, or `false` if image with given index does not exist.
     */
    function genesis_get_image_id($index = 0, $post_id = \null)
    {
    }
    /**
     * Return an image pulled from the media gallery.
     *
     * Supported $args keys are:
     *
     *  - format   - string, default is 'html'
     *  - size     - string, default is 'full'
     *  - num      - integer, default is 0
     *  - attr     - string, default is ''
     *  - fallback - mixed, default is 'first-attached'
     *
     * Applies `genesis_get_image_default_args`, `genesis_pre_get_image` and `genesis_get_image` filters.
     *
     * @since 1.0.0
     *
     * @param array|string $args Optional. Image query arguments. Default is empty array.
     * @return string|bool Return image element HTML, URL of image, or `false`.
     */
    function genesis_get_image($args = [])
    {
    }
    /**
     * Echo an image pulled from the media gallery.
     *
     * Supported $args keys are:
     *
     *  - format - string, default is 'html', may be 'url'
     *  - size   - string, default is 'full'
     *  - num    - integer, default is 0
     *  - attr   - string, default is ''
     *
     * @since 1.0.0
     *
     * @param array|string $args Optional. Image query arguments. Default is empty array.
     * @return null|false Returns `false` if URL is empty.
     */
    function genesis_image($args = [])
    {
    }
    /**
     * Return all registered image sizes arrays, including the standard sizes.
     *
     * Return a two-dimensional array of standard and additionally registered image sizes, with width, height and crop sub-keys.
     *
     * Here, the standard sizes have their sub-keys populated by pulling from the options saved in the database.
     *
     * @since 1.0.2
     *
     * @return array Two-dimensional, with `width`, `height` and `crop` sub-keys.
     */
    function genesis_get_image_sizes()
    {
    }
    /**
     * Callback for Customizer featured image archive size.
     *
     * @since 2.1.0
     *
     * @return array List of image sizes.
     */
    function genesis_get_image_sizes_for_customizer()
    {
    }
    /**
     * Is the singular featured image set to display on the current page?
     *
     * @since 3.1.0
     *
     * @return bool True if the singular featured image is hidden or will not display.
     */
    function genesis_singular_image_hidden_on_current_page()
    {
    }
    /**
     * Which post types have singular images enabled and active?
     *
     * @since 3.1.0
     *
     * @return array The singular images with active 'genesis-singular-images' support.
     */
    function genesis_post_types_with_singular_images_enabled()
    {
    }
    /**
     * Filter the attributes of all images retrieved with `wp_get_attachment_image`, add `loading="lazy"` to enable lazy loading in Chrome.
     *
     * @since 3.2.0
     *
     * @param array $attr Attributes for the image markup.
     *
     * @return array The filtered $attr array.
     */
    function genesis_image_loading($attr)
    {
    }
    /**
     * Register Genesis default layouts.
     *
     * Genesis comes with six layouts registered by default. These are:
     *
     *  - content-sidebar (default)
     *  - sidebar-content
     *  - content-sidebar-sidebar
     *  - sidebar-sidebar-content
     *  - sidebar-content-sidebar
     *  - full-width-content
     *
     * @since 1.4.0
     */
    function genesis_create_initial_layouts()
    {
    }
    /**
     * Register new layouts in Genesis.
     *
     * Modifies the global `$_genesis_layouts` variable.
     *
     * The support `$args` keys are:
     *
     *  - label (Internationalized name of the layout),
     *  - img   (URL path to layout image),
     *  - type  (Layout type).
     *
     * Although the 'default' key is also supported, the correct way to change the default is via the
     * `genesis_set_default_layout()` function to ensure only one layout is set as the default at one time.
     *
     * @since 1.4.0
     *
     * @see genesis_set_default_layout() Set a default layout.
     *
     * @global array $_genesis_layouts Holds all layouts data.
     *
     * @param string $id   ID of layout.
     * @param array  $args Layout data.
     * @return bool|array Return `false` if ID is missing or is already set. Return merged `$args` otherwise.
     */
    function genesis_register_layout($id = '', $args = [])
    {
    }
    /**
     * Add new layout type to a layout without having to directly modify the global variable.
     *
     * @since 2.5.1
     *
     * @param string       $id   ID of layout.
     * @param array|string $type Array (or string of single type) of types to add.
     * @return array Return merged type array.
     */
    function genesis_add_type_to_layout($id, $type = [])
    {
    }
    /**
     * Remove layout type from a layout without having to directly modify the global variable.
     *
     * @since 2.5.1
     *
     * @param string       $id   ID of layout.
     * @param array|string $type Array (or string of single type) of types to remove.
     * @return array Return type array.
     */
    function genesis_remove_type_from_layout($id, $type = [])
    {
    }
    /**
     * Set a default layout.
     *
     * Allow a user to identify a layout as being the default layout on a new install, as well as serve as the fallback layout.
     *
     * @since 1.4.0
     *
     * @global array $_genesis_layouts Holds all layouts data.
     *
     * @param string $id ID of layout to set as default.
     * @return bool|string Return `false` if ID is empty or layout is not registered. Return ID otherwise.
     */
    function genesis_set_default_layout($id = '')
    {
    }
    /**
     * Unregister a layout in Genesis.
     *
     * Modifies the global $_genesis_layouts variable.
     *
     * @since 1.4.0
     *
     * @global array $_genesis_layouts Holds all layout data.
     *
     * @param string $id ID of the layout to unregister.
     * @return bool `false` if ID is empty, or layout is not registered, `true` if unregister is successful.
     */
    function genesis_unregister_layout($id = '')
    {
    }
    /**
     * Return all registered Genesis layouts.
     *
     * @since 1.4.0
     *
     * @global array $_genesis_layouts Holds all layout data.
     *
     * @param array|string $type Layout type to return. Leave empty to return default layouts. For arrays, types are checked
     *                           from right to left, returning the first type with registered layouts and falling back to
     *                           'site' if no passed types have registered layouts. If the final array value is numeric, the
     *                           second value from the end is assumed to be a post type, such as 'post' or 'page' and the
     *                           layout specific to that page or post ID would be registered as 'post-123' or 'page-123'.
     *                           - Example 1, default layouts: `genesis_get_layouts();`
     *                           - Example 2, 'page-123', 'page', 'singular', then 'site':
     *                             `genesis_get_layouts( [ 'singular', get_post_type(), get_the_ID() ] );`.
     * @return array Registered layouts.
     */
    function genesis_get_layouts($type = 'site')
    {
    }
    /**
     * Return registered layouts in a format the WordPress Customizer accepts.
     *
     * @since 2.0.0
     *
     * @global array $_genesis_layouts Holds all layout data.
     *
     * @param string $type Layout type to return. Leave empty to return all types.
     * @return array Registered layouts.
     */
    function genesis_get_layouts_for_customizer($type = 'site')
    {
    }
    /**
     * Return the data from a single layout, specified by the $id passed to it.
     *
     * @since 1.4.0
     *
     * @param string $id   ID of the layout to return data for.
     * @param string $type Optional. Layout type. Default is 'site'.
     * @return null|array `null` if ID is not set, or layout is not registered. Array of layout data
     *                    otherwise, with 'label' and 'image' (and possibly 'default') sub-keys.
     */
    function genesis_get_layout($id, $type = 'site')
    {
    }
    /**
     * Return the layout that is set to default.
     *
     * @since 1.4.0
     *
     * @global array $_genesis_layouts Holds all layout data.
     *
     * @param string $type Optional. Type of layout. Default is 'site'.
     * @return string Return ID of the layout, or `nolayout`.
     */
    function genesis_get_default_layout($type = 'site')
    {
    }
    /**
     * Determine if the site has more than 1 registered layouts.
     *
     * @since 2.3.0
     *
     * @param string $type Optional. Type of layout. Default is 'site'.
     * @return bool `true` if more than one layout, `false` otherwise.
     */
    function genesis_has_multiple_layouts($type = 'site')
    {
    }
    /**
     * Return the site layout for different contexts.
     *
     * Checks both the custom field and the theme option to find the user-selected site layout, and returns it.
     *
     * Applies `genesis_site_layout` filter early to allow shortcutting of function.
     *
     * @since 1.0.0
     *
     * @global WP_Query $wp_query Query object.
     *
     * @param bool $use_cache Conditional to use cache or get fresh.
     * @return string Key of site layout or filtered value of `genesis_site_layout`.
     */
    function genesis_site_layout($use_cache = \true)
    {
    }
    /**
     * Output the form elements necessary to select a layout.
     *
     * You must manually wrap this in an HTML element with the class of `genesis-layout-selector` in order for the CSS and
     * JavaScript to apply properly.
     *
     * Supported `$args` keys are:
     *  - name     (default is ''),
     *  - selected (default is ''),
     *  - echo     (default is true).
     *
     * The Genesis admin script is enqueued to ensure the layout selector behaviour (amending label class to add border on
     * selected layout) works.
     *
     * @since 1.7.0
     *
     * @param array $args Optional. Function arguments. Default is empty array.
     * @return null|string HTML markup of labels, images and radio inputs for layout selector.
     */
    function genesis_layout_selector($args = [])
    {
    }
    /**
     * Return a structural wrap div.
     *
     * A check is made to see if the `$context` is in the `genesis-structural-wraps` theme support data. If so, then the
     * `$output` may be echoed or returned.
     *
     * @since 2.7.0
     *
     * @param string $context The location ID.
     * @param string $output  Optional. The markup to include. Can also be 'open'
     *                        (default) or 'close' to use pre-determined markup for consistency.
     * @return null|string Wrap HTML, or `null` if `genesis-structural-wraps` support is falsy.
     */
    function genesis_get_structural_wrap($context = '', $output = 'open')
    {
    }
    /**
     * Echo a structural wrap div.
     *
     * A check is made to see if the `$context` is in the `genesis-structural-wraps` theme support data. If so, then the
     * `$output` may be echoed or returned.
     *
     * @since 1.6.0
     * @since 2.7.0 Logic moved to `genesis_get_structural_wrap()` and third parameter deprecated.
     *
     * @param string $context    The location ID.
     * @param string $output     Optional. The markup to include. Can also be 'open'
     *                           (default) or 'close' to use pre-determined markup for consistency.
     * @param bool   $deprecated Deprecated.
     * @return null|string Wrap HTML, or `null` if `genesis-structural-wraps` support is falsy.
     */
    function genesis_structural_wrap($context = '', $output = 'open', $deprecated = \null)
    {
    }
    // phpcs:disable PHPCompatibility.FunctionNameRestrictions.ReservedFunctionNames.FunctionDoubleUnderscore, WordPress.NamingConventions.ValidFunctionName.FunctionDoubleUnderscore, WordPress.NamingConventions.PrefixAllGlobals.NonPrefixedFunctionFound -- Highly unlikely PHP will start using __genesis.
    /**
     * Return layout key 'content-sidebar'.
     *
     * Used as shortcut second parameter for `add_filter()`.
     *
     * @since 1.7.0
     *
     * @return string `'content-sidebar'`.
     */
    function __genesis_return_content_sidebar()
    {
    }
    /**
     * Return layout key 'sidebar-content'.
     *
     * Used as shortcut second parameter for `add_filter()`.
     *
     * @since 1.7.0
     *
     * @return string `'sidebar-content'`.
     */
    function __genesis_return_sidebar_content()
    {
    }
    /**
     * Return layout key 'content-sidebar-sidebar'.
     *
     * Used as shortcut second parameter for `add_filter()`.
     *
     * @since 1.7.0
     *
     * @return string `'content-sidebar-sidebar'`.
     */
    function __genesis_return_content_sidebar_sidebar()
    {
    }
    /**
     * Return layout key 'sidebar-sidebar-content'.
     *
     * Used as shortcut second parameter for `add_filter()`.
     *
     * @since 1.7.0
     *
     * @return string `'sidebar-sidebar-content'`.
     */
    function __genesis_return_sidebar_sidebar_content()
    {
    }
    /**
     * Return layout key 'sidebar-content-sidebar'.
     *
     * Used as shortcut second parameter for `add_filter()`.
     *
     * @since 1.7.0
     *
     * @return string `'sidebar-content-sidebar'`.
     */
    function __genesis_return_sidebar_content_sidebar()
    {
    }
    /**
     * Return layout key 'full-width-content'.
     *
     * Used as shortcut second parameter for `add_filter()`.
     *
     * @since 1.7.0
     *
     * @return string `'full-width-content'`.
     */
    function __genesis_return_full_width_content()
    {
    }
    /**
     * Genesis Framework.
     *
     * WARNING: This file is part of the core Genesis Framework. DO NOT edit this file under any circumstances.
     * Please do all modifications in the form of a child theme.
     *
     * @package Genesis\Markup
     * @author  StudioPress
     * @license GPL-2.0-or-later
     * @link    https://my.studiopress.com/themes/genesis/
     */
    /**
     * Output markup conditionally.
     *
     * Supported keys for `$args` are:
     *
     *  - `html5` (`sprintf()` pattern markup),
     *  - `context` (name of context),
     *  - `echo` (default is true).
     *
     * Applies a `genesis_markup_{context}` filter early to allow shortcutting the function.
     *
     * Applies a `genesis_markup_{context}_output` filter at the end.
     *
     * @since 1.9.0
     * @since 3.0.0 Removed xhtml argument key as xhtml support was removed.
     *
     * @param array $args {
     *     Contains markup arguments.
     *     @type string html5   Legacy HTML5 markup.
     *     @type string context Markup context.
     *     @type string open    Opening HTML markup.
     *     @type string close   Closing HTML markup.
     *     @type array  atts    Initial attributes to apply to `open`, before filters.
     *     @type string content Content to be placed between open and close HTML markup.
     *     @type bool   echo    Flag indicating whether to echo or return the resultant string.
     *     @type array  params  Additional information/data to pass to the various filters.
     * }
     * @return string|null Markup.
     */
    function genesis_markup($args = [])
    {
    }
    /**
     * Merge array of attributes with defaults, and apply contextual filter on array.
     *
     * The contextual filter is of the form `genesis_attr_{context}`.
     *
     * @since 2.0.0
     *
     * @param string $context    The context, to build filter name.
     * @param array  $attributes Optional. Extra attributes to merge with defaults.
     * @param array  $args       Optional. Custom data to pass to filter.
     * @return array Merged and filtered attributes.
     */
    function genesis_parse_attr($context, $attributes = [], $args = [])
    {
    }
    /**
     * Build list of attributes into a string and apply contextual filter on string.
     *
     * The contextual filter is of the form `genesis_attr_{context}_output`.
     *
     * @since 2.0.0
     *
     * @param string $context    The context, to build filter name.
     * @param array  $attributes Optional. Extra attributes to merge with defaults.
     * @param array  $args       Optional. Custom data to pass to filter.
     * @return string String of HTML attributes and values.
     */
    function genesis_attr($context, $attributes = [], $args = [])
    {
    }
    /**
     * Helper function for use as a filter for when you want to prevent a class from being automatically
     * generated and output on an element that is passed through the markup API.
     *
     * @since 2.2.1
     *
     * @param array $attributes Existing attributes.
     * @return array Attributes with `class` set to empty string.
     */
    function genesis_attributes_empty_class($attributes)
    {
    }
    /**
     * Helper function for use as a filter for when you want to add screen-reader-text class to an element.
     *
     * @since 2.2.1
     *
     * @param array $attributes Existing attributes.
     * @return array Attributes with `screen-reader-text` added to classes
     */
    function genesis_attributes_screen_reader_class($attributes)
    {
    }
    /**
     * Add attributes for head element.
     *
     * @since 2.2.0
     * @since 3.1.0 Moved microdata schema to `lib/functions/schema.php`.
     *
     * @param array $attributes Existing attributes for `head` element.
     * @return array Amended attributes for `head` element.
     */
    function genesis_attributes_head($attributes)
    {
    }
    /**
     * Add attributes for body element.
     *
     * @since 2.0.0
     * @since 3.1.0 Moved microdata schema to `lib/functions/schema.php`.
     *
     * @param array $attributes Existing attributes for `body` element.
     * @return array Amended attributes for `body` element.
     */
    function genesis_attributes_body($attributes)
    {
    }
    /**
     * Add attributes for header widget area element.
     *
     * @since 2.0.0
     *
     * @param array $attributes Existing attributes for header widget area element.
     * @return array Amended attributes for header widget area element.
     */
    function genesis_attributes_header_widget_area($attributes)
    {
    }
    /**
     * Add attributes for breadcrumb link wrap meta element.
     *
     * @since 2.7.0
     * @since 3.1.0 Moved microdata schema to lib/functions/schema.php.
     *
     * @param array $attributes Existing attributes for breadcrumb link wrap meta element.
     * @return array Amended attributes for breadcrumb link wrap meta element.
     */
    function genesis_attributes_breadcrumb_link_wrap_meta($attributes)
    {
    }
    /**
     * Add attributes for breadcrumb link element.
     *
     * @since 2.7.0
     * @since 3.1.0 Moved microdata schema to lib/functions/schema.php.
     *
     * @param array  $attributes Existing attributes for breadcrumb link element.
     * @param string $context   Not used. Markup context (ie. `footer-widget-area`).
     * @param array  $args      Markup arguments.
     * @return array Amended attributes for breadcrumb link element.
     */
    function genesis_attributes_breadcrumb_link($attributes, $context, $args)
    {
    }
    /**
     * Add attributes for search form.
     *
     * @since 2.2.0
     * @since 3.1.0 Moved microdata schema to `lib/functions/schema.php`.
     *
     * @param array $attributes Existing attributes for search form element.
     * @return array Amended attributes for search form element.
     */
    function genesis_attributes_search_form($attributes)
    {
    }
    /**
     * Amend the search form content to include a meta tag (for schema).
     *
     * @since 2.7.0
     *
     * @param string $content Existing search form content.
     * @return string Potentially modified search form content.
     */
    function genesis_markup_search_form_content($content)
    {
    }
    /**
     * Add attributes for search form meta tag.
     *
     * @since 2.7.0
     * @since 3.1.0 Moved microdata schema to lib/functions/schema.php.
     *
     * @param array $attributes Existing attributes for search form meta element.
     * @return array Amended attributes for search form meta element.
     */
    function genesis_attributes_search_form_meta($attributes)
    {
    }
    /**
     * Control the open/close tags for the search form label.
     *
     * Ensure that the label open/close tags get disabled if the label has no content.
     *
     * @since 2.7.0
     *
     * @param string $tag  Existing tag for search form label element.
     * @param array  $args Markup arguments.
     * @return string Potentially modified tag for search form label element.
     */
    function genesis_markup_search_form_label_control($tag, $args)
    {
    }
    /**
     * Add attributes for search form label.
     *
     * @since 2.7.0
     *
     * @param array  $attributes Existing attributes for footer widget area wrapper elements.
     * @param string $context    Not used. Markup context (ie. `footer-widget-area`).
     * @param array  $args       Markup arguments.
     * @return array Amended attributes for search form label element.
     */
    function genesis_attributes_search_form_label($attributes, $context, $args)
    {
    }
    /**
     * Add attributes for search form input element.
     *
     * @since 2.7.0
     * @since 3.1.0 Moved microdata schema to lib/functions/schema.php.
     *
     * @param array  $attributes Existing attributes for footer widget area wrapper elements.
     * @param string $context    Not used. Markup context (ie. `footer-widget-area`).
     * @param array  $args       Markup arguments.
     * @return array Amended attributes.
     */
    function genesis_attributes_search_form_input($attributes, $context, $args)
    {
    }
    /**
     * Add attributes for search form submit element.
     *
     * @since 2.7.0
     *
     * @param array  $attributes Existing attributes for footer widget area wrapper elements.
     * @param string $context    Not used. Markup context (ie. `footer-widget-area`).
     * @param array  $args       Markup arguments.
     * @return array Amended attributes.
     */
    function genesis_attributes_search_form_submit($attributes, $context, $args)
    {
    }
    /**
     * Add attributes for primary navigation element.
     *
     * @since 2.6.0
     *
     * @param array $attributes Existing attributes for primary navigation element.
     * @return array Amended attributes for primary navigation element.
     */
    function genesis_attributes_nav_primary($attributes)
    {
    }
    /**
     * Add attributes for secondary navigation element.
     *
     * @since 2.6.0
     *
     * @param array $attributes Existing attributes for secondary navigation element.
     * @return array Amended attributes for secondary navigation element.
     */
    function genesis_attributes_nav_secondary($attributes)
    {
    }
    /**
     * Add attributes for the span wrap around navigation item links.
     *
     * @since 2.2.0
     * @since 3.1.0 Moved microdata schema to lib/functions/schema.php.
     *
     * @param array $attributes Existing attributes for span wrap around navigation item links.
     * @return array Amended attributes for span wrap around navigation item links.
     */
    function genesis_attributes_nav_link_wrap($attributes)
    {
    }
    /**
     * Add attributes for the navigation item links.
     *
     * Since we're utilizing a filter that plugins might also want to filter, don't overwrite class here.
     *
     * @since 2.2.0
     * @since 3.1.0 Moved microdata schema to lib/functions/schema.php.
     *
     * @link https://github.com/studiopress/genesis/issues/1226
     *
     * @param array $attributes Existing attributes for navigation item links.
     * @return array Amended attributes for navigation item links.
     */
    function genesis_attributes_nav_link($attributes)
    {
    }
    /**
     * Add attributes for structural wrap elements.
     *
     * @since 2.0.0
     *
     * @param array $attributes Existing attributes for structural wrap elements.
     * @return array Amended attributes for structural wrap elements.
     */
    function genesis_attributes_structural_wrap($attributes)
    {
    }
    /**
     * Add attributes for main content element.
     *
     * @since 2.0.0
     *
     * @param array $attributes Existing attributes for `main` element.
     * @return array Attributes for `main` element.
     */
    function genesis_attributes_content($attributes)
    {
    }
    /**
     * Add attributes for taxonomy archive description element.
     *
     * @since 2.2.1
     *
     * @param array $attributes Existing attributes for taxonomy archive description element.
     * @return array Amended attributes for taxonomy archive description element.
     */
    function genesis_attributes_taxonomy_archive_description($attributes)
    {
    }
    /**
     * Add attributes for author archive description element.
     *
     * @since 2.2.1
     *
     * @param array $attributes Existing attributes for author archive description element.
     * @return array Amended attributes for author archive description element.
     */
    function genesis_attributes_author_archive_description($attributes)
    {
    }
    /**
     * Add attributes for CPT archive description element.
     *
     * @since 2.2.1
     *
     * @param array $attributes Existing attributes for CPT archive description element.
     * @return array Amended attributes for CPT archive description element.
     */
    function genesis_attributes_cpt_archive_description($attributes)
    {
    }
    /**
     * Add attributes for date archive description element.
     *
     * @since 2.2.1
     *
     * @param array $attributes Existing attributes for date archive description element.
     * @return array Amended attributes for date archive description element.
     */
    function genesis_attributes_date_archive_description($attributes)
    {
    }
    /**
     * Add attributes for blog template description element.
     *
     * @since 2.2.1
     *
     * @param array $attributes Existing attributes for blog template description element.
     * @return array Amended attributes for blog template description element.
     */
    function genesis_attributes_blog_template_description($attributes)
    {
    }
    /**
     * Add attributes for posts page description element.
     *
     * @since 2.2.1
     *
     * @param array $attributes Existing attributes for posts page description element.
     * @return array Amended attributes for posts page description element.
     */
    function genesis_attributes_posts_page_description($attributes)
    {
    }
    /**
     * Add attributes for entry element.
     *
     * @since 2.0.0
     * @since 3.1.0 Moved microdata schema to lib/functions/schema.php.
     *
     * @param array $attributes Existing attributes for entry element.
     * @return array Amended attributes for entry element.
     */
    function genesis_attributes_entry($attributes)
    {
    }
    /**
     * Add attributes for entry image element.
     *
     * @since 2.0.0
     * @since 3.1.0 Moved microdata schema to lib/functions/schema.php.
     *
     * @param array $attributes Existing attributes for entry image element.
     * @return array Amended attributes for entry image element.
     */
    function genesis_attributes_entry_image($attributes)
    {
    }
    /**
     * Add attributes for entry image link element.
     *
     * @since 2.3.0
     *
     * @param array $attributes Existing attributes for entry image link element.
     * @return array Amended attributes for entry image link element.
     */
    function genesis_attributes_entry_image_link($attributes)
    {
    }
    /**
     * Add attributes for singular entry image element.
     *
     * @since 3.1.0
     *
     * @param array $attributes Existing attributes for singular entry image element.
     * @return array Amended attributes for singular entry image element.
     */
    function genesis_attributes_singular_entry_image($attributes)
    {
    }
    /**
     * Add attributes for entry image element shown in a widget.
     *
     * @since 2.0.0
     * @since 3.1.0 Moved microdata schema to lib/functions/schema.php.
     *
     * @param array $attributes Existing attributes for entry image element shown in a widget.
     * @return array Amended attributes for entry image element shown in a widget.
     */
    function genesis_attributes_entry_image_widget($attributes)
    {
    }
    /**
     * Add attributes for entry author link element.
     *
     * @since 2.0.0
     * @since 3.1.0 Moved microdata schema to lib/functions/schema.php.
     *
     * @param array $attributes Existing attributes for entry author link element.
     * @return array Amended attributes for entry author link element.
     */
    function genesis_attributes_entry_author_link($attributes)
    {
    }
    /**
     * Add attributes for entry title link.
     *
     * @since 2.6.0
     *
     * @param array $attributes Existing attributes for entry title element.
     * @return array Amended attributes for entry title element.
     */
    function genesis_attributes_entry_title_link($attributes)
    {
    }
    /**
     * Add attributes for entry meta elements.
     *
     * @since 2.1.0
     *
     * @param array $attributes Existing attributes for entry meta elements.
     * @return array Amended attributes for entry meta elements.
     */
    function genesis_attributes_entry_meta($attributes)
    {
    }
    /**
     * Add attributes for pagination element.
     *
     * @since 2.0.0
     *
     * @param array $attributes Existing attributes for pagination element.
     * @return array Amended attributes for pagination element.
     */
    function genesis_attributes_pagination($attributes)
    {
    }
    /**
     * Add attributes for entry comments element.
     *
     * @since 2.0.0
     *
     * @param array $attributes Existing attributes for entry comments element.
     * @return array Amended attributes for entry comments element.
     */
    function genesis_attributes_entry_comments($attributes)
    {
    }
    /**
     * Add attributes for single comment element.
     *
     * @since 2.0.0
     * @since 3.1.0 Moved microdata schema to lib/functions/schema.php.
     *
     * @param array $attributes Existing attributes for single comment element.
     * @return array Amended attributes for single comment element.
     */
    function genesis_attributes_comment($attributes)
    {
    }
    /**
     * Add attributes for comment author link element.
     *
     * @since 2.1.0
     * @since 3.1.0 Moved microdata schema to lib/functions/schema.php.
     *
     * @param array $attributes Existing attributes for comment author link element.
     * @return array Amended attributes for comment author link element.
     */
    function genesis_attributes_comment_author_link($attributes)
    {
    }
    /**
     * Add attributes for comment time link element.
     *
     * @since 2.1.0
     * @since 3.1.0 Moved microdata schema to lib/functions/schema.php.
     *
     * @param array $attributes Existing attributes for comment time link element.
     * @param array $context Not used. Markup context (ie. `footer-widget-area`).
     * @param array $args Arguments.
     * @return array Amended attributes for comment time link.
     */
    function genesis_attributes_comment_time_link($attributes, $context, $args)
    {
    }
    /**
     * Add attributes for primary sidebar element.
     *
     * @since 2.0.0
     * @since 3.1.0 Moved microdata schema to lib/functions/schema.php.
     *
     * @param array $attributes Existing attributes for primary sidebar element.
     * @return array Amended attributes for primary sidebar element.
     */
    function genesis_attributes_sidebar_primary($attributes)
    {
    }
    /**
     * Add attributes for secondary sidebar element.
     *
     * @since 2.0.0
     * @since 3.1.0 Moved microdata schema to lib/functions/schema.php.
     *
     * @param array $attributes Existing attributes for secondary sidebar element.
     * @return array Amended attributes for secondary sidebar element.
     */
    function genesis_attributes_sidebar_secondary($attributes)
    {
    }
    /**
     * Add attributes for footer widget area wrapper elements.
     *
     * @since 2.5.0
     *
     * @param array  $attributes Existing attributes for footer widget area wrapper elements.
     * @param string $context    Not used. Markup context (ie. `footer-widget-area`).
     * @param array  $args       Markup arguments.
     * @return array Amended attributes for footer widget area wrapper elements.
     */
    function genesis_attributes_footer_widget_area($attributes, $context, $args)
    {
    }
    /**
     * Add ID markup to the elements to jump to.
     *
     * @since 2.2.0
     *
     * @link https://gist.github.com/salcode/7164690
     */
    function genesis_skiplinks_markup()
    {
    }
    /**
     * Add ID markup to primary navigation.
     *
     * @since 2.2.0
     *
     * @param array $attributes Existing attributes for primary navigation element.
     * @return array Amended attributes for primary navigation element.
     */
    function genesis_skiplinks_attr_nav_primary($attributes)
    {
    }
    /**
     * Add ID markup to main content area.
     *
     * @since 2.2.0
     *
     * @param array $attributes Existing attributes for `main` element.
     * @return array Amended attributes for `main` element.
     */
    function genesis_skiplinks_attr_content($attributes)
    {
    }
    /**
     * Add ID markup to primary sidebar.
     *
     * @since 2.2.0
     *
     * @param array $attributes Existing attributes for primary sidebar element.
     * @return array Amended attributes for primary sidebar element.
     */
    function genesis_skiplinks_attr_sidebar_primary($attributes)
    {
    }
    /**
     * Add ID markup to secondary sidebar.
     *
     * @since 2.2.0
     *
     * @param array $attributes Existing attributes for secondary sidebar element.
     * @return array Amended attributes for secondary sidebar element.
     */
    function genesis_skiplinks_attr_sidebar_secondary($attributes)
    {
    }
    /**
     * Add ID markup to footer widget area.
     *
     * @since 2.2.0
     *
     * @param array $attributes Existing attributes for footer widget area element.
     * @return array Amended attributes for footer widget area element.
     */
    function genesis_skiplinks_attr_footer_widgets($attributes)
    {
    }
    /**
     * Add the alignleft class to the previous post link container.
     *
     * @since 2.7.0
     *
     * @param array $attributes Existing attributes for the previous post element.
     * @return array Amended attributes for the previous post element.
     */
    function genesis_adjacent_entry_attr_previous_post($attributes)
    {
    }
    /**
     * Add the alignright class to the next post link container.
     *
     * @since 2.7.0
     *
     * @param array $attributes Existing attributes for the next post element.
     * @return array Amended attributes for the next post element.
     */
    function genesis_adjacent_entry_attr_next_post($attributes)
    {
    }
    /**
     * Genesis Framework.
     *
     * WARNING: This file is part of the core Genesis Framework. DO NOT edit this file under any circumstances.
     * Please do all modifications in the form of a child theme.
     *
     * @package Genesis\Menus
     * @author  StudioPress
     * @license GPL-2.0-or-later
     * @link    https://my.studiopress.com/themes/genesis/
     */
    /**
     * Determine if a child theme supports a particular Genesis nav menu.
     *
     * @since 1.8.0
     *
     * @param string $menu Name of the menu to check support for.
     * @return bool `true` if menu supported, `false` otherwise.
     */
    function genesis_nav_menu_supported($menu)
    {
    }
    /**
     * Determine if the Superfish script is enabled.
     *
     * If child theme supports HTML5 and the Load Superfish Script theme setting is checked, or if the
     * `genesis_superfish_enabled` filter is true, then this function returns true. False otherwise.
     *
     * @since 1.9.0
     *
     * @return bool `true` if Superfish is enabled, `false` otherwise.
     */
    function genesis_superfish_enabled()
    {
    }
    /**
     * Register the theme's responsive menus' configuration settings.
     *
     * @since 3.0.0
     *
     * @param array $config Optional. Array of configuration parameters for the responsive menus.
     *
     * @return Genesis_Menu_Handler returns an instance of the handler.
     */
    function genesis_register_responsive_menus(array $config = [])
    {
    }
    /**
     * Return the markup to display a menu consistent with the Genesis format.
     *
     * Applies the `genesis_$location_nav` filter e.g. `genesis_header_nav`. For primary and secondary menu locations, it
     * applies the `genesis_do_nav` and `genesis_do_subnav` filters instead for backwards compatibility.
     *
     * @since 2.1.0
     *
     * @param string|array $args Menu arguments.
     * @return string|null Navigation menu markup, or `null` if menu is not assigned to theme location, there is
     *                     no menu, or there are no menu items in the menu.
     */
    function genesis_get_nav_menu($args = [])
    {
    }
    /**
     * Echo the output from `genesis_get_nav_menu()`.
     *
     * @since 2.1.0
     *
     * @param string|array $args Menu arguments.
     */
    function genesis_nav_menu($args)
    {
    }
    /**
     * Checks if the provided menu name is unique and returns a unique version.
     *
     * Useful during one-click theme setup to create menus with unique names based
     * on a starting name.
     *
     * @since 3.1.0
     *
     * @param string $name The name to start with.
     * @return string The original name if unique, or the name appended by a number
     *                that makes it unique.
     */
    function genesis_unique_menu_name($name)
    {
    }
    /**
     * Return a cached onboarding config.
     *
     * @since 2.10.0
     *
     * @return array $config The onboarding config.
     */
    function genesis_onboarding_config()
    {
    }
    /**
     * Determine if the onboarding feature is properly enabled (via config) in a child theme.
     *
     * @since 2.10.0
     *
     * @return bool True if config exists and at least one feature is configured. False otherwise.
     */
    function genesis_onboarding_active()
    {
    }
    /**
     * Returns an array of onboarding plugins provided by Genesis or the child theme.
     *
     * @since 2.8.0
     *
     * @return array
     */
    function genesis_onboarding_plugins()
    {
    }
    /**
     * Returns an array of widgets provided by Genesis or the child theme.
     *
     * @since 3.1.0
     *
     * @return array
     */
    function genesis_onboarding_widgets()
    {
    }
    /**
     * Returns an unordered list of valid onboarding plugins provided by Genesis or the child theme.
     *
     * @since 2.9.0
     *
     * @param string $pack The starter pack slug to return the plugins list for.
     * @return string An unordered list of plugins, or empty string if no valid plugins in list.
     */
    function genesis_onboarding_plugins_list($pack = '')
    {
    }
    /**
     * Build HTML for an unordered list of onboarding content provided the child theme.
     *
     * @since 3.1.0
     *
     * @param string $pack The starter pack slug to return the plugins list for.
     * @return string An unordered list of plugins, or empty string if no valid plugins in list.
     */
    function genesis_onboarding_content_list($pack = '')
    {
    }
    /**
     * Output HTML to show a selection of starter packs if supported by the theme.
     *
     * @since 3.1.0
     */
    function genesis_onboarding_starter_packs_list()
    {
    }
    /**
     * Returns an array of onboarding content provided by Genesis or the child theme.
     *
     * @since 2.8.0
     *
     * @return array
     */
    function genesis_onboarding_content()
    {
    }
    /**
     * Installs plugin language packs during the onboarding process.
     *
     * Hooked to the 'upgrader_process_complete' action.
     *
     * @since 2.8.0
     */
    function genesis_onboarding_install_language_packs()
    {
    }
    /**
     * Returns an array of onboarding navigation menu configuration data
     * provided by Genesis or the child theme.
     *
     * @since 2.9.0
     * @return array
     */
    function genesis_onboarding_navigation_menus()
    {
    }
    /**
     * Returns an array of onboarding starter pack configuration data
     * provided by Genesis or the child theme.
     *
     * @since 3.1.0
     * @return array
     */
    function genesis_onboarding_starter_packs()
    {
    }
    /**
     * Gets onboarding tasks from those declared in the theme's `onboarding.php`.
     *
     * An onboarding task is a step during the theme setup process, such as
     * installing plugins or adding page content.
     *
     * @since 3.1.0
     *
     * @return array The tasks to run.
     */
    function genesis_onboarding_tasks()
    {
    }
    /**
     * Creates the navigation menus based on the configuration
     * provided in the child theme.
     *
     * @since 2.9.0
     * @return array Empty array if successful, an array of error messages if not.
     */
    function genesis_onboarding_create_navigation_menus()
    {
    }
    /**
     * Creates the navigation menu items based on the configuration
     * provided in the child theme.
     *
     * @since 2.9.0
     * @return array Empty array if successful, an array of error messages if not.
     */
    function genesis_onboarding_create_navigation_menu_items()
    {
    }
    /**
     * Installs the plugin dependencies during onboarding.
     *
     * @param array $dependencies The dependencies config array.
     * @param int   $step The current step being processed.
     * @since 2.9.0
     *
     * @return void|WP_Error
     */
    function genesis_onboarding_install_dependencies(array $dependencies, $step = 0)
    {
    }
    /**
     * Imports the demo content during onboarding.
     *
     * @param array $content The content config array.
     * @since 2.9.0
     *
     * @return array
     */
    function genesis_onboarding_import_content(array $content)
    {
    }
    /**
     * Inserts widgets from the onboarding config file.
     *
     * @since 3.1.0
     *
     * @param array $content The content config.
     * @param array $imported_posts Imported posts with content short name as keys and IDs as values.
     */
    function genesis_onboarding_import_widgets($content, $imported_posts)
    {
    }
    /**
     * Detect plugins that emit Open Graph tags.
     *
     * Helps to determine if the Open Graph Customizer panel should be visible when
     * Genesis SEO is active.
     *
     * Excludes plugins tested by `genesis_detect_seo_plugins()`. Genesis Open
     * Graph is already disabled if those are active.
     *
     * @since 3.2.0
     *
     * @return bool True if Open Graph Plugins are detected, false otherwise.
     */
    function genesis_detect_open_graph_plugins()
    {
    }
    /**
     * Determines if Open Graph settings should be visible in the Customizer.
     *
     * @since 3.2.0
     *
     * @return bool True if Genesis Open Graph options should be visible.
     */
    function genesis_open_graph_available()
    {
    }
    /**
     * Initializes Genesis Open Graph support if enabled.
     *
     * @since 3.2.0
     */
    function genesis_open_graph()
    {
    }
    /**
     * Genesis Framework.
     *
     * WARNING: This file is part of the core Genesis Framework. DO NOT edit this file under any circumstances.
     * Please do all modifications in the form of a child theme.
     *
     * @package Genesis\Options
     * @author  StudioPress
     * @license GPL-2.0-or-later
     * @link    https://my.studiopress.com/themes/genesis/
     */
    /**
     * Return option from the options table and cache result.
     *
     * Applies `genesis_pre_get_option_$key` and `genesis_options` filters.
     *
     * Values pulled from the database are cached on each request, so a second request for the same value won't cause a
     * second DB interaction.
     *
     * @since 1.0.0
     *
     * @param string $key       Option name.
     * @param string $setting   Optional. Settings field name. Eventually defaults to `GENESIS_SETTINGS_FIELD` if not
     *                          passed as an argument.
     * @param bool   $use_cache Optional. Whether to use the Genesis cache value or not. Default is true.
     * @return mixed The value of the `$key` in the database, or the return from
     *               `genesis_pre_get_option_{$key}` short circuit filter if not `null`.
     */
    function genesis_get_option($key, $setting = \null, $use_cache = \true)
    {
    }
    /**
     * Echo options from the options database.
     *
     * @since 1.0.0
     *
     * @param string $key       Option name.
     * @param string $setting   Optional. Settings field name. Eventually defaults to GENESIS_SETTINGS_FIELD.
     * @param bool   $use_cache Optional. Whether to use the Genesis cache value or not. Default is true.
     */
    function genesis_option($key, $setting = \null, $use_cache = \true)
    {
    }
    /**
     * Return SEO options from the SEO options database.
     *
     * @since 1.0.0
     *
     * @param string $key       Option name.
     * @param bool   $use_cache Optional. Whether to use the Genesis cache value or not. Defaults to true.
     * @return mixed The value of the `$key` in the database, or the return from
     *               `genesis_pre_get_option_{$key}` short circuit filter if not `null`.
     */
    function genesis_get_seo_option($key, $use_cache = \true)
    {
    }
    /**
     * Echo an SEO option from the SEO options database.
     *
     * @since 1.0.0
     *
     * @param string $key       Option name.
     * @param bool   $use_cache Optional. Whether to use the Genesis cache value or not. Defaults to true.
     */
    function genesis_seo_option($key, $use_cache = \true)
    {
    }
    /**
     * Return a CPT Archive setting value from the options table.
     *
     * @since 2.0.0
     *
     * @param string $key            Option name.
     * @param string $post_type_name Post type name.
     * @param bool   $use_cache      Optional. Whether to use the Genesis cache value or not. Defaults to true.
     * @return mixed The value of the `$key` in the database, or the return from
     *               `genesis_pre_get_option_{$key}` short circuit filter if not `null`.
     */
    function genesis_get_cpt_option($key, $post_type_name = '', $use_cache = \true)
    {
    }
    /**
     * Echo a CPT Archive option from the options table.
     *
     * @since 2.0.0
     *
     * @param string $key            Option name.
     * @param string $post_type_name Post type name.
     * @param bool   $use_cache      Optional. Whether to use the Genesis cache value or not. Defaults to true.
     */
    function genesis_cpt_option($key, $post_type_name, $use_cache = \true)
    {
    }
    /**
     * Echo data from a post or page custom field.
     *
     * Echo only the first value of custom field.
     *
     * Pass in a `printf()` pattern as the second parameter and have that wrap around the value, if the value is not falsy.
     *
     * @since 1.0.0
     *
     * @param string $field          Custom field key.
     * @param string $output_pattern `printf()` compatible output pattern.
     * @param int    $post_id        Optional. Post ID to use for Post Meta lookup, defaults to `get_the_ID()`.
     */
    function genesis_custom_field($field, $output_pattern = '%s', $post_id = \null)
    {
    }
    /**
     * Return custom field post meta data.
     *
     * Return only the first value of custom field. Return empty string if field is blank or not set.
     *
     * @since 1.0.0
     *
     * @param string $field   Custom field key.
     * @param int    $post_id Optional. Post ID to use for Post Meta lookup, defaults to `get_the_ID()`.
     * @return string|bool Return value or empty string on failure.
     */
    function genesis_get_custom_field($field, $post_id = \null)
    {
    }
    /**
     * Save post meta / custom field data for a post or page.
     *
     * It verifies the nonce, then checks we're not doing autosave, ajax or a future post request. It then checks the
     * current user's permissions, before finally* either updating the post meta, or deleting the field if the value was not
     * truthy.
     *
     * By passing an array of fields => values from the same meta box (and therefore same nonce) into the $data argument,
     * repeated checks against the nonce, request and permissions are avoided.
     *
     * @since 1.9.0
     *
     * @param array       $data         Key/Value pairs of data to save in '_field_name' => 'value' format.
     * @param string      $nonce_action Nonce action for use with wp_verify_nonce().
     * @param string      $nonce_name   Name of the nonce to check for permissions.
     * @param WP_Post|int $post         Post object or ID.
     * @param int         $deprecated   Deprecated (formerly accepted a post ID).
     * @return void Return early if permissions are incorrect, doing autosave, Ajax or future post.
     */
    function genesis_save_custom_fields(array $data, $nonce_action, $nonce_name, $post, $deprecated = \null)
    {
    }
    /**
     * Get an expiring database setting.
     *
     * Checks the associate expiration timestamp before returning the setting value.
     *
     * If the setting has expired, delete the setting and expiration.
     *
     * @since 2.9.0
     *
     * @param string $setting The setting key.
     * @param int    $current_time The current timestamp. `time()` if null.
     * @return mixed The value of the setting, or false if setting is expired.
     */
    function genesis_get_expiring_setting($setting, $current_time = \null)
    {
    }
    /**
     * Set an expiring database setting.
     *
     * Updates the value and expiration timestamp for an expiring setting.
     *
     * @since 2.9.0
     *
     * @param string $setting  The setting key.
     * @param mixed  $value    The value to save.
     * @param int    $duration The duration this setting should remain active.
     * @return mixed The result of `update_option( $setting )`.
     */
    function genesis_set_expiring_setting($setting, $value, $duration)
    {
    }
    /**
     * Delete an expiring database setting.
     *
     * Deletes the database settings for both the $setting and the associated expiration timestamp.
     *
     * @since 2.9.0
     *
     * @param string $setting  The setting key.
     * @return mixed The result of `delete_option( $setting )`.
     */
    function genesis_delete_expiring_setting($setting)
    {
    }
    /**
     * Takes an array of new settings, merges them with the old settings, and pushes them into the database.
     *
     * @since 2.1.0
     *
     * @param string|array $new     New settings. Can be a string, or an array.
     * @param string       $setting Optional. Settings field name. Default is GENESIS_SETTINGS_FIELD.
     * @return bool `true` if option was updated, `false` otherwise.
     */
    function genesis_update_settings($new = '', $setting = \GENESIS_SETTINGS_FIELD)
    {
    }
    /**
     * Register post meta for Genesis Block Editor features, such as the title
     * and breadcrumbs checkbox controls.
     *
     * Meta must be registered to allow getting and setting via the REST API.
     *
     * Protecting fields by prefixing them with an underscore prevents them from
     * appearing in the Custom Fields meta box, where they would override changes
     * to the Block Editor Redux store.
     *
     * Passing '__return_true' for `auth_callback` allows the field to be updated
     * via the REST API even though it is protected.
     *
     * @since 3.1.0
     */
    function genesis_register_post_meta()
    {
    }
    /**
     * Genesis Framework.
     *
     * WARNING: This file is part of the core Genesis Framework. DO NOT edit this file under any circumstances.
     * Please do all modifications in the form of a child theme.
     *
     * @package StudioPress\Genesis
     * @author  StudioPress
     * @license GPL-2.0-or-later
     * @link    https://my.studiopress.com/themes/genesis/
     */
    /**
     * Handles system requirements checks.
     *
     * @since 2.7
     *
     * @return mixed Boolean true if the requirements are met, an array of messages if not.
     */
    function genesis_check_requirements()
    {
    }
    /**
     * Activates the default theme when requirements are not met.
     *
     * @since 2.7
     *
     * @param string   $stylesheet The previously-activated theme name.
     * @param WP_Theme $old_theme WP_Theme instance of the previously-activated theme.
     */
    function genesis_activate_fallback_theme($stylesheet, \WP_Theme $old_theme)
    {
    }
    /**
     * Genesis Framework.
     *
     * WARNING: This file is part of the core Genesis Framework. DO NOT edit this file under any circumstances.
     * Please do all modifications in the form of a child theme.
     *
     * @package Genesis\SEO
     * @author  StudioPress
     * @license GPL-2.0-or-later
     * @link    https://my.studiopress.com/themes/genesis/
     */
    /**
     * Disable the Genesis SEO features.
     *
     * @since 1.6.0
     *
     * @see genesis_default_title()
     * @see genesis_doc_head_control()
     * @see genesis_seo_meta_description()
     * @see genesis_seo_meta_keywords()
     * @see genesis_robots_meta()
     * @see genesis_canonical()
     * @see genesis_add_inpost_seo_box()
     * @see genesis_add_inpost_seo_save()
     * @see genesis_add_taxonomy_seo_options()
     * @see genesis_user_seo_fields()
     */
    function genesis_disable_seo()
    {
    }
    /**
     * Detect whether or not Genesis SEO has been disabled.
     *
     * @since 1.8.0
     *
     * @return bool `true` if Genesis SEO is disabled, `false` otherwise.
     */
    function genesis_seo_disabled()
    {
    }
    /**
     * Detect whether Genesis SEO is active.
     *
     * @since 2.6.0
     *
     * @return bool `true` if Genesis SEO is active, `false` otherwise.
     */
    function genesis_seo_active()
    {
    }
    /**
     * Check for the existence of popular SEO plugins and disable the Genesis SEO features if one or more of the plugins
     * is active.
     *
     * Runs before the menu is built, so we can disable SEO Settings menu, if necessary.
     *
     * @since 1.2.0
     *
     * @see genesis_default_title()
     */
    function genesis_seo_compatibility_check()
    {
    }
    /**
     * Detect some SEO Plugin that add constants, classes or functions.
     *
     * Applies `genesis_detect_seo_plugins` filter to allow third party manipulation of SEO plugin list.
     *
     * @since 1.6.0
     *
     * @return bool `true` if plugin exists, or `false` if plugin constant, class or function not detected.
     */
    function genesis_detect_seo_plugins()
    {
    }
    /**
     * Sets the Primary Title H1 Genesis SEO setting to None if a heading level one
     * is found on a static homepage.
     *
     * @since 3.1.0
     *
     * @param int $post_id The page to check for an h1.
     */
    function genesis_maybe_clear_primary_title_h1($post_id)
    {
    }
    /**
     * Determines if JSON-LD is enabled from 3rd party plugins.
     *
     * @since 3.1.0
     *
     * @return bool True if enabled, false if else.
     */
    function genesis_is_wpseo_outputting_jsonld()
    {
    }
    /**
     * Adds a toolbar link to edit the custom post archive settings
     *
     * @since 2.3.0
     *
     * @global WP_Admin_Bar $wp_admin_bar
     *
     * @param WP_Admin_Bar $wp_admin_bar WP_Admin_Bar instance.
     * @return WP_Admin_Bar Return `$wp_admin_bar` early if in admin, not a CPT archive, not a valid post type,
     *                      or a post type that does not have support for `genesis-cpt-archive-settings`.
     */
    function genesis_cpt_archive_settings_link($wp_admin_bar)
    {
    }
    /**
     * Adds the pencil icon to the CPT archive settings menu link.
     *
     * Add custom CSS to `<head>`.
     *
     * @since 2.3.0
     */
    function genesis_cpt_archive_settings_toolbar_styles()
    {
    }
    /**
     * Genesis Framework.
     *
     * WARNING: This file is part of the core Genesis Framework. DO NOT edit this file under any circumstances.
     * Please do all modifications in the form of a child theme.
     *
     * @package Genesis\Updates
     * @author  StudioPress
     * @license GPL-2.0-or-later
     * @link    https://my.studiopress.com/themes/genesis/
     */
    /**
     * Ping https://api.genesistheme.com/ asking if a new version of this theme is available.
     *
     * If not, it returns false.
     *
     * If so, the external server passes serialized data back to this function, which gets unserialized and returned for use.
     *
     * Applies `genesis_update_remote_post_options` filter.
     *
     * Ping occurs at a maximum of once every 24 hours.
     *
     * @since 1.1.0
     *
     * @global string $wp_version WordPress version string.
     *
     * @return array Unserialized data, or empty array if updates are disabled or
     *               theme does not support `genesis-auto-updates`.
     */
    function genesis_update_check()
    {
    }
    /**
     * Upgrade the database to latest version.
     *
     * @since 2.6.0
     */
    function genesis_upgrade_db_latest()
    {
    }
    /**
     * Update Genesis to the latest version.
     *
     * This iterative update function will take a Genesis installation, no matter
     * how old, and update its options to the latest version.
     *
     * It used to iterate over theme version, but now uses a database version
     * system, which allows for changes within pre-releases, too.
     *
     * @since 1.0.1
     *
     * @return void Return early if we're already on the latest version.
     */
    function genesis_upgrade()
    {
    }
    /**
     * Run silent upgrade on each site in the network during a network upgrade.
     *
     * Update Genesis database settings for all sites in a network during network upgrade process.
     *
     * @since 2.0.0
     *
     * @param int $blog_id Blog ID.
     */
    function genesis_network_upgrade_site($blog_id)
    {
    }
    /**
     * Genesis settings upgrade. Silent upgrade (no redirect).
     *
     * Meant to be called via ajax request during network upgrade process.
     *
     * @since 2.0.0
     */
    function genesis_silent_upgrade()
    {
    }
    /**
     * Upgrade the Genesis database after an update has completed.
     *
     * After an update has been completed, send a remote GET request to `admin-ajax.php` to trigger a silent upgrade.
     *
     * @since 2.10.0
     *
     * @param object $upgrader   The upgrader object.
     * @param array  $hook_extra Details about the upgrade process.
     * @return null
     */
    function genesis_update_complete($upgrader, $hook_extra)
    {
    }
    /**
     * Filter the action links at the end of an update.
     *
     * This function filters the action links that are presented to the user at the end of a theme update. If the theme
     * being updated is not Genesis, the filter returns the default values. Otherwise, it will provide its own links.
     *
     * @since 1.1.3
     *
     * @param array  $actions Existing array of action links.
     * @param string $theme   Theme name.
     * @return array Replace all existing action links, if Genesis is the theme being updated.
     *               Otherwise, return existing action links.
     */
    function genesis_update_action_links(array $actions, $theme)
    {
    }
    /**
     * Display the update nag at the top of the dashboard if there is a Genesis update available.
     *
     * @since 1.1.0
     *
     * @return void Return early if there is no available update, or user is not a site administrator,
     *              or file modifications have been disabled.
     */
    function genesis_update_nag()
    {
    }
    /**
     * Sends out update notification email.
     *
     * Does several checks before finally sending out a notification email to the
     * specified email address, alerting it to a Genesis update available for that install.
     *
     * @since 1.1.0
     *
     * @return void Return early if email should not be sent.
     */
    function genesis_update_email()
    {
    }
    /**
     * Disable WordPress from giving update notifications on Genesis or Genesis child themes.
     *
     * This function filters the value that is saved after WordPress tries to pull theme update transient data from WordPress.org
     *
     * Its purpose is to disable update notifications for Genesis and Genesis child themes.
     * This prevents WordPress.org repo themes from being installed over one of our themes.
     *
     * @since 2.0.2
     *
     * @param object $value Update check object.
     * @return object Update check object.
     */
    function genesis_disable_wporg_updates($value)
    {
    }
    /**
     * Integrate the Genesis update check into the WordPress update checks.
     *
     * This function filters the value that is returned when WordPress tries to pull theme update transient data.
     *
     * It uses `genesis_update_check()` to check to see if we need to do an update, and if so, adds the proper array to the
     * `$value->response` object. WordPress handles the rest.
     *
     * @since 1.1.0
     *
     * @param object $value Update check object.
     * @return object Modified update check object.
     */
    function genesis_update_push($value)
    {
    }
    /**
     * Delete Genesis update transient after updates or when viewing the themes page.
     *
     * The server will then do a fresh version check.
     *
     * It also disables the update nag on those pages as well.
     *
     * @since 1.1.0
     *
     * @see genesis_update_nag()
     */
    function genesis_clear_update_transient()
    {
    }
    /**
     * Converts array of keys from Genesis options to vestigial options.
     *
     * This is done for backwards compatibility.
     *
     * @since 1.6.0
     *
     * @access private
     *
     * @param array  $keys    Array of keys to convert. Default is an empty array.
     * @param string $setting Optional. The settings field the original keys are found under. Default is GENESIS_SETTINGS_FIELD.
     * @return void Return early if no `$keys` were provided, or no new vestigial options are needed.
     */
    function _genesis_vestige(array $keys = [], $setting = \GENESIS_SETTINGS_FIELD)
    {
    }
    /**
     * Genesis Framework.
     *
     * WARNING: This file is part of the core Genesis Framework. DO NOT edit this file under any circumstances.
     * Please do all modifications in the form of a child theme.
     *
     * @package Genesis\Updates
     * @author  StudioPress
     * @license GPL-2.0-or-later
     * @link    https://my.studiopress.com/themes/genesis/
     */
    /**
     * Calculate or return the first version of Genesis to run on this site.
     *
     * @since 2.1.0
     *
     * @return string First version of Genesis to run on the site.
     */
    function genesis_first_version()
    {
    }
    /**
     * Helper function for comparing the "first install" version to a user specified version.
     *
     * @since 2.1.0
     *
     * @param string $version  Version number to compare first version against.
     * @param string $operator Relationship between versions.
     * @return bool `true` if the relationship is the one specified by the operator, `false` otherwise.
     */
    function genesis_first_version_compare($version, $operator)
    {
    }
    /**
     * Retrieve and return the database version.
     *
     * Attempt to retrieve the database version setting.
     *
     * If one does not exist, fabricate one using the `theme_version` setting if it exists, or PARENT_DB_VERSION (minus 1).
     *
     * @since 3.1.0
     *
     * @param bool $cache Use cache when retrieving version(s).
     * @return string Database version.
     */
    function genesis_get_db_version($cache = \false)
    {
    }
    /**
     * Genesis Framework.
     *
     * WARNING: This file is part of the core Genesis Framework. DO NOT edit this file under any circumstances.
     * Please do all modifications in the form of a child theme.
     *
     * @package Genesis\WidgetAreas
     * @author  StudioPress
     * @license GPL-2.0-or-later
     * @link    https://my.studiopress.com/themes/genesis/
     */
    /**
     * Expedites the widget area registration process by taking common things, before / after_widget, before / after_title,
     * and doing them automatically.
     *
     * See the WP function `register_sidebar()` for the list of supports $args keys.
     *
     * A typical usage is:
     *
     * ~~~
     * genesis_register_widget_area(
     *     array(
     *         'id'          => 'my-sidebar',
     *         'name'        => __( 'My Sidebar', 'my-theme-text-domain' ),
     *         'description' => __( 'A description of the intended purpose or location', 'my-theme-text-domain' ),
     *     )
     * );
     * ~~~
     *
     * @since 2.1.0
     *
     * @param string|array $args Name, ID, description and other widget area arguments.
     * @return string The sidebar ID that was added.
     */
    function genesis_register_widget_area($args)
    {
    }
    /**
     * An alias for `genesis_register_widget_area()`.
     *
     * @since 1.0.1
     *
     * @param string|array $args Name, ID, description and other widget area arguments.
     * @return string The sidebar ID that was added.
     */
    function genesis_register_sidebar($args)
    {
    }
    /**
     * Hook the callback that registers the default Genesis widget areas.
     *
     * @since 1.6.0
     */
    function genesis_register_default_widget_areas()
    {
    }
    /**
     * Register the default Genesis widget areas, if the placeholder widget areas are still registered.
     *
     * @since 2.2.0
     */
    function _genesis_register_default_widget_areas_cb()
    {
    }
    /**
     * Register footer widget areas based on the number of widget areas the user wishes to create with `add_theme_support()`.
     *
     * @since 1.6.0
     *
     * @return void Return early if there is no theme support for `genesis-footer-widgets`
     *              or the number of widgets given is not set or not numeric.
     */
    function genesis_register_footer_widget_areas()
    {
    }
    /**
     * Register after-entry widget area if user specifies in the child theme.
     *
     * @since 2.1.0
     *
     * @return void Return early if there is no theme support for `genesis-after-entry-widget-area`.
     */
    function genesis_register_after_entry_widget_area()
    {
    }
    /**
     * Conditionally display a sidebar, wrapped in a div by default.
     *
     * The $args array accepts the following keys:
     *
     *  - `before` (markup to be displayed before the widget area output),
     *  - `after` (markup to be displayed after the widget area output),
     *  - `default` (fallback text if the sidebar is not found, or has no widgets, default is an empty string),
     *  - `show_inactive` (flag to show inactive sidebars, default is false),
     *  - `before_sidebar_hook` (hook that fires before the widget area output),
     *  - `after_sidebar_hook` (hook that fires after the widget area output).
     *
     * Return false early if the sidebar is not active and the `show_inactive` argument is false.
     *
     * @since 1.8.0
     *
     * @param string $id   Sidebar ID, as per when it was registered.
     * @param array  $args Arguments.
     * @return bool `false` if `$id` is falsy, or `$args['show_inactive']` is falsy and sidebar
     *              is not currently being used. `true` otherwise.
     */
    function genesis_widget_area($id, $args = [])
    {
    }
    /**
     * Widget heading filter, default H4 in Widgets and sidebars modified to an H3 if genesis_a11y( 'headings' ) support
     *
     * For using a semantic heading structure, improves accessibility
     *
     * @since 2.2.0
     *
     * @param array $args Existing sidebar default arguments.
     * @return array Amended sidebar default arguments.
     */
    function genesis_a11y_register_sidebar_defaults($args)
    {
    }
    /**
     * Adds an H2 title to widget areas.
     *
     * For using a semantic heading structure, improves accessibility
     *
     * @since 2.2.0
     *
     * @global array $wp_registered_sidebars
     *
     * @param string $id Sidebar ID, as per when it was registered.
     * @return string|null Widget area heading, or `null` if `headings` are not enabled for
     *                     Genesis accessibility, or `$id` is not registered as a widget area ID.
     */
    function genesis_sidebar_title($id)
    {
    }
    /**
     * Add custom heading and / or description to category / tag / taxonomy archive pages.
     *
     * If the page is not a category, tag or taxonomy term archive, or there's no term, or
     * no term meta set, then nothing extra is displayed.
     *
     * If there's a title to display, it is marked up as a level 1 heading.
     *
     * If there's a description to display, it runs through `wpautop()`,
     * `do_shortcode()` and `autoembed()` before being added to a div.
     *
     * @since 2.10.0 Filter intro text with `do_shortcode()` and `autoembed()`.
     * @since 1.3.0
     *
     * @global WP_Query $wp_query Query object.
     * @global WP_Embed $wp_embed Embed object.
     *
     * @return void Return early if not the correct archive page, or no term is found.
     */
    function genesis_do_taxonomy_title_description()
    {
    }
    /**
     * Add custom headline and description to author archive pages.
     *
     * If we're not on an author archive page, then nothing extra is displayed.
     *
     * If there's a custom headline to display, it is marked up as a level 1 heading.
     *
     * If there's a description (intro text) to display, it is run through `wpautop()` before being added to a div.
     *
     * @since 1.4.0
     *
     * @return void Return early if not author archive.
     */
    function genesis_do_author_title_description()
    {
    }
    /**
     * Add author box to the top of author archive.
     *
     * If the headline and description are set to display the author box appears underneath them.
     *
     * @since 1.4.0
     *
     * @see genesis_do_author_title_and_description Author title and description.
     *
     * @return void Return early if not author archive or not page one.
     */
    function genesis_do_author_box_archive()
    {
    }
    /**
     * Add custom headline and description to relevant custom post type archive pages.
     *
     * If we're not on a post type archive page, then nothing extra is displayed.
     *
     * If there's a custom headline to display, it is marked up as a level 1 heading.
     *
     * If there's a description (intro text) to display, it is run through wpautop() before being added to a div.
     *
     * @since 2.0.0
     *
     * @return void Return early if not on post type archive or post type does not
     *              have `genesis-cpt-archives-settings` support
     */
    function genesis_do_cpt_archive_title_description()
    {
    }
    /**
     * Add custom heading to date archive pages.
     *
     * If we're not on a date archive page, then nothing extra is displayed.
     *
     * @since 2.2.0
     *
     * @return void Return early if not on date archive.
     */
    function genesis_do_date_archive_title()
    {
    }
    /**
     * Add custom heading and description to blog template pages.
     *
     * If we're not on a blog template page, then nothing extra is displayed.
     *
     * @since 2.2.0
     *
     * @return void Return early if not on blog template archive, or `headings` is not
     *              enabled for Genesis accessibility.
     */
    function genesis_do_blog_template_heading()
    {
    }
    /**
     * Add custom heading to assigned posts page.
     *
     * If we're not on a posts page, then nothing extra is displayed.
     *
     * @since 2.2.1
     *
     * @return void Return early if `headings` is not enabled for Genesis accessibility, there is no
     *              page for posts assigned, this is not the home (posts) page, or this is not the page found at `/`.
     */
    function genesis_do_posts_page_heading()
    {
    }
    /**
     * Add open markup for archive headings to archive pages.
     *
     * @since 2.5.0
     *
     * @param string $heading    Optional. Archive heading, default is empty string.
     * @param string $intro_text Optional. Archive intro text, default is empty string.
     * @param string $context    Optional. Archive context, default is empty string.
     */
    function genesis_do_archive_headings_open($heading = '', $intro_text = '', $context = '')
    {
    }
    /**
     * Add close markup for archive headings to archive pages.
     *
     * @since 2.5.0
     *
     * @param string $heading    Optional. Archive heading, default is empty string.
     * @param string $intro_text Optional. Archive intro text, default is empty string.
     * @param string $context    Optional. Archive context, default is empty string.
     */
    function genesis_do_archive_headings_close($heading = '', $intro_text = '', $context = '')
    {
    }
    /**
     * Add headline for archive headings to archive pages.
     *
     * @since 2.5.0
     *
     * @param string $heading    Optional. Archive heading, default is empty string.
     * @param string $intro_text Optional. Archive intro text, default is empty string.
     * @param string $context    Optional. Archive context, default is empty string.
     */
    function genesis_do_archive_headings_headline($heading = '', $intro_text = '', $context = '')
    {
    }
    /**
     * Add intro text for archive headings to archive pages.
     *
     * @since 2.5.0
     *
     * @param string $heading    Optional. Archive heading, default is empty string.
     * @param string $intro_text Optional. Archive intro text, default is empty string.
     * @param string $context    Optional. Archive context, default is empty string.
     */
    function genesis_do_archive_headings_intro_text($heading = '', $intro_text = '', $context = '')
    {
    }
    /**
     * Output the comments at the end of entries.
     *
     * Load comments only if we are on a post, page, or CPT that supports comments, and only if comments or trackbacks are enabled.
     *
     * @since 1.1.0
     *
     * @return void Return early if post type does not support `comments`.
     */
    function genesis_get_comments_template()
    {
    }
    /**
     * Echo Genesis default comment structure.
     *
     * Does the `genesis_list_comments` action.
     *
     * Applies the `genesis_title_comments`, `genesis_prev_comments_link_text`, `genesis_next_comments_link_text`,
     * `genesis_no_comments_text` and `genesis_comments_closed_text` filters.
     *
     * @since 1.1.2
     *
     * @global WP_Query $wp_query Query object.
     *
     * @return void Return early if on a page with Genesis page comments off, or on a post with Genesis post comments off.
     */
    function genesis_do_comments()
    {
    }
    /**
     * Echo Genesis default trackback structure.
     *
     * Does the `genesis_list_args` action.
     *
     * Applies the `genesis_no_pings_text` filter.
     *
     * @since 1.1.2
     *
     * @global WP_Query $wp_query Query object.
     *
     * @return void Return early if on a page with Genesis page trackbacks off, or on a
     *              post with Genesis post trackbacks off.
     */
    function genesis_do_pings()
    {
    }
    /**
     * Output the list of comments.
     *
     * Applies the `genesis_comment_list_args` filter.
     *
     * @since 1.0.0
     *
     * @see genesis_html5_comment_callback() HTML5 callback.
     * @see genesis_comment_callback()       XHTML callback.
     */
    function genesis_default_list_comments()
    {
    }
    /**
     * Output the list of trackbacks.
     *
     * Applies the `genesis_ping_list_args` filter.
     *
     * @since 1.0.0
     */
    function genesis_default_list_pings()
    {
    }
    /**
     * Comment callback for {@link genesis_default_list_comments()} if HTML5 is active.
     *
     * Does `genesis_before_comment` and `genesis_after_comment` actions.
     *
     * Applies `comment_author_says_text` and `genesis_comment_awaiting_moderation` filters.
     *
     * @since 2.0.0
     *
     * @param stdClass $comment Comment object.
     * @param array    $args    Comment args.
     * @param int      $depth   Depth of current comment.
     */
    function genesis_html5_comment_callback($comment, array $args, $depth)
    {
    }
    /**
     * Optionally show the comment form.
     *
     * Genesis asks WP for the HTML5 version of the comment form - it uses {@link genesis_comment_form_args()} to revert to
     * XHTML form fields when child theme does not support HTML5.
     *
     * @since 1.0.0
     *
     * @return void Return early if comments are closed via Genesis for this page or post.
     */
    function genesis_do_comment_form()
    {
    }
    /**
     * Filter the comments link. If post has comments, link to #comments div. If no, link to #respond div.
     *
     * @since 2.0.1
     *
     * @param string      $link    Post comments permalink with '#comments' appended.
     * @param int|WP_Post $post_id Post ID or WP_Post object.
     * @return string URL to comments if they exist, otherwise URL to the comment form.
     */
    function genesis_comments_link_filter($link, $post_id)
    {
    }
    /**
     * Are comments enabled in Genesis at Theme Settings → Comments and Trackbacks?
     *
     * @since 3.3.0
     *
     * @return bool True if comments are enabled for this post type.
     */
    function genesis_comments_enabled()
    {
    }
    /**
     * Are trackbacks enabled in Genesis at Theme Settings → Comments and Trackbacks?
     *
     * @since 3.3.0
     *
     * @return bool True if trackbacks are enabled for this post type.
     */
    function genesis_trackbacks_enabled()
    {
    }
    /**
     * Are trackbacks or comments appearing on the current post?
     *
     * Used to improve heading level hierarchy in comments.php if comments or
     * trackbacks are visible.
     *
     * @since 3.3.0
     *
     * @return bool True if trackbacks or comments are showing on the current post.
     */
    function genesis_comments_trackbacks_showing()
    {
    }
    /**
     * Genesis Framework.
     *
     * WARNING: This file is part of the core Genesis Framework. DO NOT edit this file under any circumstances.
     * Please do all modifications in the form of a child theme.
     *
     * @package Genesis\Footer
     * @author  StudioPress
     * @license GPL-2.0-or-later
     * @link    https://my.studiopress.com/themes/genesis/
     */
    /**
     * Are footer widgets hidden for the current page?
     *
     * Indicates that the “Hide Footer Widgets” checkbox is enabled and checked.
     *
     * @since 3.2.0
     *
     * @return bool True if footer widgets are hidden, false otherwise.
     */
    function genesis_footer_widgets_hidden_on_current_page()
    {
    }
    /**
     * Echo the markup necessary to facilitate the footer widget areas.
     *
     * Check for a numerical parameter given when adding theme support - if none is found, then the function returns early.
     *
     * The child theme must style the widget areas.
     *
     * Applies the `genesis_footer_widget_areas` filter.
     *
     * @since 1.6.0
     *
     * @return void Return early if number of widget areas could not be determined,
     *              or nothing is added to the first widget area.
     */
    function genesis_footer_widget_areas()
    {
    }
    /**
     * Echo the opening div tag for the footer.
     *
     * Also optionally adds wrapping div opening tag.
     *
     * @since 1.2.0
     */
    function genesis_footer_markup_open()
    {
    }
    /**
     * Echo the closing div tag for the footer.
     *
     * Also optionally adds wrapping div closing tag.
     *
     * @since 1.2.0
     */
    function genesis_footer_markup_close()
    {
    }
    /**
     * Echo the contents of the footer including processed shortcodes.
     *
     * Applies `genesis_footer_creds_text` and `genesis_footer_output` filters.
     *
     * @since 3.0.0 Removed `[footer_backtotop]` shortcode and `genesis_footer_backtotop_text` filter.
     * @since 1.0.1
     */
    function genesis_do_footer()
    {
    }
    /**
     * Echo the footer scripts, defined in Theme Settings.
     *
     * Applies the `genesis_footer_scripts` filter to the value returns from the footer_scripts option.
     *
     * Also outputs page-specific body scripts if their position is set to 'bottom'.
     *
     * @since 1.1.0
     */
    function genesis_footer_scripts()
    {
    }
    /**
     * Echo the doctype and opening markup.
     *
     * If you are going to replace the doctype with a custom one, you must remember to include the opening <html> and
     * <head> elements too, along with the proper attributes.
     *
     * It would be beneficial to also include the <meta> tag for content type.
     *
     * The default doctype is XHTML v1.0 Transitional, unless HTML support os present in the child theme.
     *
     * @since 1.3.0
     * @since 3.0.0 Removed xhtml logic.
     */
    function genesis_do_doctype()
    {
    }
    /**
     * HTML5 doctype markup.
     *
     * @since 2.0.0
     */
    function genesis_html5_doctype()
    {
    }
    /**
     * Filter Document title parts based on context and SEO settings values.
     *
     * @since 2.6.0
     *
     * @param array $parts The document title parts.
     * @return array Return modified array of title parts.
     */
    function genesis_document_title_parts($parts)
    {
    }
    /**
     * Filter Document title parts separator based on SEO setting value.
     *
     * @since 2.6.0
     *
     * @param string $sep The title parts separator.
     * @return string Return modified title parts separator.
     */
    function genesis_document_title_separator($sep)
    {
    }
    /**
     * Remove unnecessary code that WordPress puts in the `head`.
     *
     * @since 1.3.0
     */
    function genesis_doc_head_control()
    {
    }
    /**
     * Output the meta description based on contextual criteria.
     *
     * Output nothing if description isn't present.
     *
     * @since 1.2.0
     * @since 2.4.0 Logic moved to `genesis_get_seo_meta_description()`
     *
     * @see genesis_get_seo_meta_description()
     */
    function genesis_seo_meta_description()
    {
    }
    /**
     * Output the meta keywords based on contextual criteria.
     *
     * Outputs nothing if keywords are not present.
     *
     * @since 1.2.0
     * @since 2.4.0 Logic moved to `genesis_get_seo_meta_keywords()`
     *
     * @see genesis_get_seo_meta_keywords()
     */
    function genesis_seo_meta_keywords()
    {
    }
    /**
     * Output the robots meta code in the document `head`.
     *
     * @since 1.0.0
     * @since 2.4.0 Logic moved to `genesis_get_robots_meta_content()`
     *
     * @see genesis_get_robots_meta_content()
     *
     * @return void Return early if blog is not public.
     */
    function genesis_robots_meta()
    {
    }
    /**
     * Outputs the responsive CSS viewport tag.
     *
     * Applies `genesis_viewport_value` filter on content attribute.
     *
     * @since 1.9.0
     * @since 2.7.0 Adds `minimum-scale=1` when AMP URL.
     * @since 3.0 Do not check if theme supports `genesis-responsive-viewport`.
     */
    function genesis_responsive_viewport()
    {
    }
    /**
     * Echo favicon link.
     *
     * @since 1.0.0
     * @since 2.4.0 Logic moved to `genesis_get_favicon_url()`.
     *
     * @see genesis_get_favicon_url()
     *
     * @return void Return early if WP Site Icon is used.
     */
    function genesis_load_favicon()
    {
    }
    /**
     * Adds the pingback meta tag to the head so that other sites can know how to send a pingback to our site.
     *
     * @since 1.3.0
     */
    function genesis_do_meta_pingback()
    {
    }
    /**
     * Output rel links in the head to indicate previous and next pages in paginated archives and posts.
     *
     * @link https://webmasters.googleblog.com/2011/09/pagination-with-relnext-and-relprev.html
     *
     * @since 2.2.0
     *
     * @return void Return early if doing a Customizer preview.
     */
    function genesis_paged_rel()
    {
    }
    /**
     * Output meta tag for site name.
     *
     * @since 2.2.0
     *
     * @return void Return early if not HTML5 or not front page.
     */
    function genesis_meta_name()
    {
    }
    /**
     * Output meta tag for site URL.
     *
     * @since 2.2.0
     *
     * @return void Return early if not HTML5 or not front page.
     */
    function genesis_meta_url()
    {
    }
    /**
     * Echo custom canonical link tag.
     *
     * Remove the default WordPress canonical tag, and use our custom
     * one. Gives us more flexibility and effectiveness.
     *
     * @since 1.0.0
     */
    function genesis_canonical()
    {
    }
    /**
     * Echo header scripts in to wp_head().
     *
     * Allows shortcodes.
     *
     * Applies `genesis_header_scripts` filter on value stored in header_scripts setting.
     *
     * Also echoes scripts from the post's custom field.
     *
     * @since 1.0.0
     */
    function genesis_header_scripts()
    {
    }
    /**
     * Output page-specific body scripts if their position is set to 'top'.
     *
     * If the position is 'bottom' or null, output occurs in genesis_footer_scripts() instead.
     *
     * @since 2.5.0
     */
    function genesis_page_specific_body_scripts()
    {
    }
    /**
     * Activate the custom header feature.
     *
     * It gets arguments passed through add_theme_support(), defines the constants, and calls `add_custom_image_header()`.
     *
     * Applies `genesis_custom_header_defaults` filter.
     *
     * @since 1.6.0
     *
     * @return void Return early if `custom-header` or `genesis-custom-header` are not supported in the theme.
     */
    function genesis_custom_header()
    {
    }
    /**
     * Add support for the WordPress custom logo feature.
     *
     * Passes add_theme_support() arguments from `genesis-custom-logo` to `custom-logo`.
     *
     * Applies `genesis_custom_logo_defaults` filter.
     *
     * @since 3.1.0
     *
     * @return void Return early if `custom-logo` is supported or `genesis-custom-logo` is not supported in the theme.
     */
    function genesis_custom_logo()
    {
    }
    /**
     * Custom header callback.
     *
     * It outputs special CSS to the document head, modifying the look of the header based on user input.
     *
     * @since 1.6.0
     *
     * @return void Return early if `custom-header` not supported, user specified own callback, or no options set.
     */
    function genesis_custom_header_style()
    {
    }
    /**
     * Echo the opening structural markup for the header.
     *
     * @since 1.2.0
     */
    function genesis_header_markup_open()
    {
    }
    /**
     * Echo the opening structural markup for the header.
     *
     * @since 1.2.0
     */
    function genesis_header_markup_close()
    {
    }
    /**
     * Echo the default header, including the #title-area div, along with #title and #description, as well as the .widget-area.
     *
     * Does the `genesis_site_title`, `genesis_site_description` and `genesis_header_right` actions.
     *
     * @since 1.0.2
     *
     * @global $wp_registered_sidebars Holds all of the registered sidebars.
     */
    function genesis_do_header()
    {
    }
    /**
     * Adds the WordPress custom logo inside the title area, before the site title hook.
     *
     * @since 3.1.0
     */
    function genesis_output_custom_logo()
    {
    }
    /**
     * Echo the site title into the header.
     *
     * Depending on the SEO option set by the user, this will either be wrapped in an `h1` or `p` element.
     * The Site Title will be wrapped in a link to the homepage, if a custom logo is not in use.
     *
     * Applies the `genesis_seo_title` filter before echoing.
     *
     * @since 1.1.0
     */
    function genesis_seo_site_title()
    {
    }
    /**
     * Echo the site description into the header.
     *
     * Depending on the SEO option set by the user, this will either be wrapped in an `h1` or `p` element.
     *
     * Applies the `genesis_seo_description` filter before echoing.
     *
     * @since 1.1.0
     */
    function genesis_seo_site_description()
    {
    }
    /**
     * Sets attributes for the custom menu widget if used in the Header Right widget area.
     *
     * @since 1.9.0
     *
     * @param array $args Navigation menu arguments.
     * @return array $args Arguments for custom menu widget used in Header Right widget area.
     */
    function genesis_header_menu_args($args)
    {
    }
    /**
     * Wrap the header navigation menu in its own nav tags with markup API.
     *
     * @since 2.0.0
     *
     * @param string $menu Menu output.
     * @return string $menu Modified menu output, or original if not HTML5.
     */
    function genesis_header_menu_wrap($menu)
    {
    }
    /**
     * Add skip links for screen readers and keyboard navigation.
     *
     * @since 2.2.0
     *
     * @return void Return early if skip links are not supported.
     */
    function genesis_skip_links()
    {
    }
    /**
     * Filter the content width based on the user selected layout.
     *
     * @since 1.6.0
     *
     * @param int $default Default width.
     * @param int $small   Small width.
     * @param int $large   Large width.
     * @return int Content width.
     */
    function genesis_content_width($default, $small, $large)
    {
    }
    /**
     * Add custom field body class(es) to the body classes.
     *
     * It accepts values from a per-post or per-page custom field, and only outputs when viewing a singular page.
     *
     * @since 1.4.0
     *
     * @param array $classes Existing body classes.
     * @return array Amended body classes.
     */
    function genesis_custom_body_class(array $classes)
    {
    }
    /**
     * Add header-* classes to the body class.
     *
     * We can use pseudo-variables in our CSS file, which helps us achieve multiple header layouts with minimal code.
     *
     * @since 1.0.0
     *
     * @param array $classes Existing body classes.
     * @return array Amended body classes.
     */
    function genesis_header_body_classes(array $classes)
    {
    }
    /**
     * Add site layout classes to the body classes.
     *
     * We can use pseudo-variables in our CSS file, which helps us achieve multiple site layouts with minimal code.
     *
     * @since 1.0.0
     *
     * @param array $classes Existing body classes.
     * @return array Amended body classes.
     */
    function genesis_layout_body_classes(array $classes)
    {
    }
    /**
     * Adds a `genesis-title-hidden` body class if title output is suppressed on the current page.
     *
     * @since 3.1.0
     *
     * @param array $classes Existing body classes.
     * @return array Amended body classes.
     */
    function genesis_title_hidden_body_class(array $classes)
    {
    }
    /**
     * Adds a `genesis-breadcrumbs-hidden` body class if breadcrumbs are hidden on the current page.
     *
     * @since 3.1.0
     *
     * @param array $classes Existing body classes.
     * @return array Amended body classes.
     */
    function genesis_breadcrumbs_hidden_body_class(array $classes)
    {
    }
    /**
     * Adds a `genesis-singular-image-hidden` body class if “hide featured image” is enabled.
     *
     * @since 3.1.0
     *
     * @param array $classes Existing body classes.
     * @return array Amended body classes.
     */
    function genesis_singular_image_hidden_body_class(array $classes)
    {
    }
    /**
     * Adds a `genesis-singular-image-visible` body class.
     *
     * @since 3.1.1
     *
     * @param array $classes Existing body classes.
     * @return array Amended body classes.
     */
    function genesis_singular_image_visible_body_class(array $classes)
    {
    }
    /**
     * Adds `genesis-footer-widgets-hidden` and genesis-footer-widgets-visible` body classes if footer widgets
     * are supported by the child theme and the Footer Widgets Panel is available in the Genesis Sidebar.
     *
     * @since 3.2.0
     *
     * @param array $classes Existing body classes.
     * @return array Amended body classes.
     */
    function genesis_footer_widgets_hidden_body_class(array $classes)
    {
    }
    /**
     * Add archive-no-results body class on empty archive pages.
     *
     * Allows CSS styling of archive pages that have no results.
     *
     * @since 2.2.0
     *
     * @global WP_Query $wp_query Query object.
     *
     * @param array $classes Existing body classes.
     * @return array Amended body classes.
     */
    function genesis_archive_no_results_body_class(array $classes)
    {
    }
    /**
     * Add style selector classes to the body classes.
     *
     * Enables style selector support in child themes, which helps us achieve multiple site styles with minimal code.
     *
     * @since 1.8.0
     *
     * @param array $classes Existing body classes.
     * @return array Amended body classes.
     */
    function genesis_style_selector_body_classes(array $classes)
    {
    }
    /**
     * Adds a custom class to the custom post type archive body classes.
     *
     * It accepts a value from the archive settings page.
     *
     * @since 2.0.0
     *
     * @param array $classes Existing body classes.
     * @return array Amended body classes.
     */
    function genesis_cpt_archive_body_class(array $classes)
    {
    }
    /**
     * Output the sidebar.php file if layout allows for it.
     *
     * @since 1.0.0
     */
    function genesis_get_sidebar()
    {
    }
    /**
     * Output the sidebar_alt.php file if layout allows for it.
     *
     * @since 1.0.0
     */
    function genesis_get_sidebar_alt()
    {
    }
    /**
     * Attach a loop to the `genesis_loop` output hook so we can get some front-end output.
     *
     * @since 1.1.0
     */
    function genesis_do_loop()
    {
    }
    /**
     * Standard loop, meant to be executed without modification in most circumstances where content needs to be displayed.
     *
     * It outputs basic wrapping HTML, but uses hooks to do most of its content output like title, content, post information
     * and comments.
     *
     * The action hooks called are:
     *
     *  - `genesis_before_entry`
     *  - `genesis_entry_header`
     *  - `genesis_before_entry_content`
     *  - `genesis_entry_content`
     *  - `genesis_after_entry_content`
     *  - `genesis_entry_footer`
     *  - `genesis_after_endwhile`
     *  - `genesis_loop_else` (only if no posts were found)
     *
     * @since 1.1.0
     *
     * @return void Return early after legacy loop if not supporting HTML5.
     */
    function genesis_standard_loop()
    {
    }
    /**
     * Custom loop, meant to be executed when a custom query is needed.
     *
     * It accepts arguments in query_posts style format to modify the custom `WP_Query` object.
     *
     * It outputs basic wrapping HTML, but uses hooks to do most of its content output like title, content, post information,
     * and comments.
     *
     * The arguments can be passed in via the `genesis_custom_loop_args` filter.
     *
     * The action hooks called are the same as {@link genesis_standard_loop()}.
     *
     * @since 1.1.0
     *
     * @global WP_Query $wp_query Query object.
     * @global int      $more
     *
     * @param array $args Loop configuration.
     */
    function genesis_custom_loop($args = [])
    {
    }
    /**
     * The grid loop - a specific implementation of a custom loop.
     *
     * Outputs markup compatible with a Feature + Grid style layout.
     *
     * The arguments can be filtered by the `genesis_grid_loop_args` filter.
     *
     * @since 1.5.0
     *
     * @global array $_genesis_loop_args Associative array for grid loop configuration.
     *
     * @param array $args Associative array for grid loop configuration.
     */
    function genesis_grid_loop($args = [])
    {
    }
    /**
     * Filter the post classes to output custom classes for the feature and grid layout.
     *
     * Based on the grid loop args and the loop counter.
     *
     * Applies the `genesis_grid_loop_post_class` filter.
     *
     * The `&1` is a test to see if it is odd. `2&1 = 0` (even), `3&1 = 1` (odd).
     *
     * @since 1.5.0
     *
     * @global array    $_genesis_loop_args Associative array for grid loop config.
     * @global WP_Query $wp_query           Query object.
     *
     * @param array $classes Existing post classes.
     * @return array Amended post classes.
     */
    function genesis_grid_loop_post_class(array $classes)
    {
    }
    /**
     * Output specially formatted content, based on the grid loop args.
     *
     * @since 1.5.0
     *
     * @global array $_genesis_loop_args Associative array for grid loop configuration.
     */
    function genesis_grid_loop_content()
    {
    }
    /**
     * Modify the global $_genesis_displayed_ids each time a loop iterates.
     *
     * Keep track of what posts have been shown on any given page by adding each ID to a global array, which can be used any
     * time by other loops to prevent posts from being displayed twice on a page.
     *
     * @since 2.0.0
     *
     * @global array $_genesis_displayed_ids Array of displayed post IDs.
     */
    function genesis_add_id_to_global_exclude()
    {
    }
    /**
     * Pass nav menu link attributes through attribute parser.
     *
     * Adds nav menu link attributes via the Genesis markup API.
     *
     * @since 2.2.0
     *
     * @param array $atts {
     *      The HTML attributes applied to the menu item's link element, empty strings are ignored.
     *
     *      @type string $title Title attribute.
     *      @type string $target Target attribute.
     *      @type string $rel The rel attribute.
     *      @type string $href The href attribute.
     * }
     * @return array Maybe modified menu attributes array.
     */
    function genesis_nav_menu_link_attributes($atts)
    {
    }
    /**
     * Register the custom menu locations, if theme has support for them.
     *
     * Does the `genesis_register_nav_menus` action.
     *
     * @since 1.8.0
     *
     * @return void Return early if `genesis-menus` are not supported.
     */
    function genesis_register_nav_menus()
    {
    }
    /**
     * Echo the "Primary Navigation" menu.
     *
     * Applies the `genesis_do_nav` filter.
     *
     * @since 1.0.0
     */
    function genesis_do_nav()
    {
    }
    /**
     * Echo the "Secondary Navigation" menu.
     *
     * Applies the `genesis_do_subnav` filter.
     *
     * @since 1.0.0
     */
    function genesis_do_subnav()
    {
    }
    /**
     * Genesis Framework.
     *
     * WARNING: This file is part of the core Genesis Framework. DO NOT edit this file under any circumstances.
     * Please do all modifications in the form of a child theme.
     *
     * @package Genesis\Entry
     * @author  StudioPress
     * @license GPL-2.0-or-later
     * @link    https://my.studiopress.com/themes/genesis/
     */
    /**
     * Restore all default post loop output by re-hooking all default functions.
     *
     * Useful in the event that you need to unhook something in a particular context, but don't want to restore it for all
     * subsequent loop instances.
     *
     * Calls `genesis_reset_loops` action after everything has been re-hooked.
     *
     * @since 1.5.0
     *
     * @global array $_genesis_loop_args Associative array for grid loop configuration.
     */
    function genesis_reset_loops()
    {
    }
    /**
     * Add `entry` post class, remove `hentry` post class if HTML5.
     *
     * @since 1.9.0
     *
     * @param array $classes Existing post classes.
     * @return array Amended post classes. Not modified if in WP admin, or doing Ajax request.
     */
    function genesis_entry_post_class($classes)
    {
    }
    /**
     * Add a custom post class, saved as a custom field.
     *
     * @since 1.4.0
     *
     * @param array $classes Existing post classes.
     * @return array Amended post classes. Not modified if in WP admin.
     */
    function genesis_custom_post_class(array $classes)
    {
    }
    /**
     * Featured Image Post Class
     *
     * @since 2.2.0
     *
     * @param array $classes Existing post classes.
     * @return array Amended post classes. Not modified if in WP admin.
     */
    function genesis_featured_image_post_class($classes)
    {
    }
    /**
     * Add a post format icon.
     *
     * Adds an image, corresponding to the post format, before the post title.
     *
     * @since 1.4.0
     *
     * @return void Return early if `post-formats` or `genesis-post-format-images` are not supported.
     */
    function genesis_do_post_format_image()
    {
    }
    /**
     * Is the entry header hidden for the current page?
     *
     * Indicates that the “Hide title” checkbox is enabled and checked.
     *
     * @since 3.1.0
     *
     * @return bool True if title is hidden, false otherwise.
     */
    function genesis_entry_header_hidden_on_current_page()
    {
    }
    /**
     * Echo the opening structural markup for the entry header.
     *
     * @since 3.1.0 Suppress output if “hide title” checkbox is ticked.
     * @since 2.0.0
     */
    function genesis_entry_header_markup_open()
    {
    }
    /**
     * Echo the closing structural markup for the entry header.
     *
     * @since 3.1.0 Suppress output if “hide title” checkbox is ticked.
     * @since 2.0.0
     */
    function genesis_entry_header_markup_close()
    {
    }
    /**
     * Echo the title of a post.
     *
     * The `genesis_post_title_text` filter is applied on the text of the title, while the `genesis_post_title_output`
     * filter is applied on the echoed markup.
     *
     * @since 3.1.0 Suppress output if “hide title” checkbox is ticked.
     * @since 1.1.0
     *
     * @return void Return early if the filtered trimmed title is an empty string.
     */
    function genesis_do_post_title()
    {
    }
    /**
     * Echo the post info (byline) under the post title.
     *
     * By default, only does post info on posts.
     *
     * The post info makes use of several shortcodes by default, and the whole output
     * is filtered via `genesis_post_info` before echoing.
     *
     * @since 1.0.0
     *
     * @return void Return early if post type lacks support for `genesis-entry-meta-before-content`.
     */
    function genesis_post_info()
    {
    }
    /**
     * Echo the post image on archive pages.
     *
     * If this an archive page and the option is set to show thumbnail, then it gets the image size as per the theme
     * setting, wraps it in the post permalink and echoes it.
     *
     * @since 1.1.0
     */
    function genesis_do_post_image()
    {
    }
    /**
     * Gets the singular image for the current post.
     *
     * Applies the `genesis_singular_image_size` filter.
     *
     * @since 3.1.1.
     *
     * @return string|bool Singular image element HTML or `false`.
     */
    function genesis_get_singular_image()
    {
    }
    /**
     * Echoes the post image on singular pages.
     *
     * If this is a singular page and the option is set to show the features image, then it gets the image size
     * as per the post type supports and echoes it.
     *
     * @since 3.1.0
     */
    function genesis_do_singular_image()
    {
    }
    /**
     * Echo the post content.
     *
     * On single posts or pages it echoes the full content, and optionally the trackback string if enabled. On single pages,
     * also adds the edit link after the content.
     *
     * Elsewhere it displays either the excerpt, limited content, or full content.
     *
     * Applies the `genesis_edit_post_link` filter.
     *
     * @since 1.1.0
     */
    function genesis_do_post_content()
    {
    }
    /**
     * Display page links for paginated posts (i.e. includes the <!--nextpage--> Quicktag one or more times).
     *
     * @since 2.0.0
     */
    function genesis_do_post_content_nav()
    {
    }
    /**
     * Show permalink if no title.
     *
     * If the entry has no title, this is a way to display a link to the full post.
     *
     * Applies the `genesis_post_permalink` filter.
     *
     * @since 2.0.0
     */
    function genesis_do_post_permalink()
    {
    }
    /**
     * Echo filterable content when there are no posts to show.
     *
     * The applied filter is `genesis_noposts_text`.
     *
     * @since 1.1.0
     */
    function genesis_do_noposts()
    {
    }
    /**
     * Echo the opening structural markup for the entry footer.
     *
     * @since 2.0.0
     */
    function genesis_entry_footer_markup_open()
    {
    }
    /**
     * Echo the closing structural markup for the entry footer.
     *
     * @since 2.0.0
     */
    function genesis_entry_footer_markup_close()
    {
    }
    /**
     * Echo the post meta after the post content.
     *
     * By default, does post meta on all public post types except page.
     *
     * The post info makes use of a couple of shortcodes by default, and the whole output is filtered via
     * `genesis_post_meta` before echoing.
     *
     * @since 1.0.0
     *
     * @return void Return early if post type lacks support for `genesis-entry-meta-after-content`.
     */
    function genesis_post_meta()
    {
    }
    /**
     * Conditionally add the author box after single posts or pages.
     *
     * @since 1.0.0
     *
     * @return void Return early if not a single post or page, or post type does not support `author`.
     */
    function genesis_do_author_box_single()
    {
    }
    /**
     * Return the author box and its contents.
     *
     * @since 2.7.0
     *
     * @global WP_User $authordata Author (user) object.
     *
     * @param string $context Optional. Allows different author box markup for different contexts, specifically 'single'.
     *                        Default is empty string.
     * @return string HTML for author box.
     */
    function genesis_get_author_box($context = '')
    {
    }
    /**
     * Return the author box and its contents by WP_User ID.
     *
     * The title is filterable via `genesis_author_box_title`,
     *      the description is filterable via `genesis_author_box_description`,
     *      and the gravatar size is filterable via `genesis_author_box_gravatar_size`.
     *
     * The final output is filterable via `genesis_author_box`, which passes many variables through.
     *
     * @since 2.7.0
     *
     * @param  int    $user_id Required. The user ID to get the author box from.
     * @param  string $context Optional. Allows different author box markup for different contexts, specifically 'single'.
     *                         Default is empty string.
     * @return string HTML for author box.
     */
    function genesis_get_author_box_by_user($user_id, $context = '')
    {
    }
    /**
     * Echo the author box and its contents.
     *
     * The title is filterable via `genesis_author_box_title`, and the gravatar size is filterable via
     * `genesis_author_box_gravatar_size`.
     *
     * The final output is filterable via `genesis_author_box`, which passes many variables through.
     *
     * @since 1.3.0
     * @since 2.7.0 Logic moved to `genesis_get_author_box()` and second parameter deprecated.
     *
     * @param string $context    Optional. Allows different author box markup for different contexts, specifically 'single'.
     *                           Default is empty string.
     * @param bool   $deprecated Deprecated.
     * @return string HTML for author box if `$deprecated` param is falsy.
     */
    function genesis_author_box($context = '', $deprecated = \null)
    {
    }
    /**
     * Display after-entry widget area on the genesis_after_entry action hook.
     *
     * @since 2.1.0
     *
     * @return void Return early if not singular, or post type does not support after entry widget area.
     */
    function genesis_after_entry_widget_area()
    {
    }
    /**
     * Conditionally echo archive pagination in a format dependent on chosen setting.
     *
     * This is shown at the end of archives to get to another page of entries.
     *
     * @since 1.0.0
     */
    function genesis_posts_nav()
    {
    }
    /**
     * Echo archive pagination in Previous Posts / Next Posts format.
     *
     * Applies `genesis_prev_link_text` and `genesis_next_link_text` filters.
     *
     * @since 1.0.0
     */
    function genesis_prev_next_posts_nav()
    {
    }
    /**
     * Echo archive pagination in page numbers format.
     *
     * Applies the `genesis_prev_link_text` and `genesis_next_link_text` filters.
     *
     * The links, if needed, are ordered as:
     *
     *  * previous page arrow,
     *  * first page,
     *  * up to two pages before current page,
     *  * current page,
     *  * up to two pages after the current page,
     *  * last page,
     *  * next page arrow.
     *
     * @since 1.0.0
     *
     * @global WP_Query $wp_query Query object.
     *
     * @return void Return early if on a single post or page, or only one page exists.
     */
    function genesis_numeric_posts_nav()
    {
    }
    /**
     * Display links to previous and next entry.
     *
     * @since 2.3.0
     *
     * @return void Return early if not singular or post type doesn't support `genesis-adjacent-entry-nav`.
     */
    function genesis_adjacent_entry_nav()
    {
    }
    /**
     * Helper function to display adjacent entry navigation on single posts. Must be hooked to `genesis_after_entry` at priority 10 or earlier to work properly.
     *
     * @since 1.5.1
     */
    function genesis_prev_next_post_nav()
    {
    }
    /**
     * Echo primary sidebar default content.
     *
     * Only shows if sidebar is empty, and current user has the ability to edit theme options (manage widgets).
     *
     * @since 1.2.0
     */
    function genesis_do_sidebar()
    {
    }
    /**
     * Echo alternate sidebar default content.
     *
     * Only shows if sidebar is empty, and current user has the ability to edit theme options (manage widgets).
     *
     * @since 1.2.0
     */
    function genesis_do_sidebar_alt()
    {
    }
    /**
     * Template for default widget area content.
     *
     * @since 2.0.0
     *
     * @param string $name Name of the widget area e.g. `__( 'Secondary Sidebar Widget Area', 'yourtextdomain' )`.
     */
    function genesis_default_widget_area_content($name)
    {
    }
}